#!/usr/bin/env node
var ut=Object.defineProperty;var l=(i,t)=>ut(i,"name",{value:t,configurable:!0});import{readFileSync as Vt,writeFileSync as Gt}from"fs";import{resolve as rt}from"path";var Ne="1.0.0",Z="QA Agent";import F from"fs";import pt from"os";import ee from"path";var pe=l(i=>(...t)=>{F.appendFileSync(i,`[${new Date().toISOString()}] ${Array.isArray(t)?t.join(" "):t}
`)},"logToFile"),s=pe("/tmp/mcp-evaluator-debug.log"),ft=l((i,t)=>{let e=JSON.stringify(t),r=Buffer.from(e).toString("base64");return`cursor://anysphere.cursor-deeplink/mcp/install?name=${encodeURIComponent(i)}&config=${r}`},"generateCursorMCPDeeplink"),mt=l(i=>{let t=["-y","github:myBraavos/mcp-evaluator-optimizer#qa-agent"];return i&&t.push("--api-url",i),{command:"npx",args:t}},"generateMCPServerConfig"),ke=l((i="evaluator-optimizer",t)=>{let e=mt(t);return ft(i,e)},"createCursorInstallLink");function te(){switch(pt.platform()){case"darwin":return"macos";case"win32":case"cygwin":return"windows";case"linux":case"android":return"linux";case"aix":case"freebsd":case"openbsd":case"netbsd":case"sunos":case"haiku":default:return"unix"}}l(te,"getOSName");function ue(i){return typeof i=="string"?i:""}l(ue,"safeString");function O(i,t){if(!i||typeof i!="string"||!t||typeof t!="string")return!1;try{return i.toLowerCase().includes(t.toLowerCase())}catch{return!1}}l(O,"safeIncludes");function gt(){try{let i=ue(process.argv?.[0]),t=ue(process.execPath),e=ue(process.env._);return{name:i.toLowerCase(),execPath:t.toLowerCase(),argv0:e.toLowerCase()}}catch{return{name:"",execPath:"",argv0:""}}}l(gt,"getProcessInfo");function Oe(){try{let i=process.env||{},t=gt();if(i.VSCODE_PID||i.VSCODE_CWD||i.VSCODE_INJECTION||i.VSCODE_IPC_HOOK||i.VSCODE_IPC_HOOK_CLI)return O(t.name,"cursor")||O(t.execPath,"cursor")||O(t.argv0,"cursor")||i.CURSOR_USER_DATA_DIR||i.CURSOR_LOGS_DIR?"cursor":"vscode";if(i.TERM_PROGRAM&&typeof i.TERM_PROGRAM=="string")try{switch(i.TERM_PROGRAM.toLowerCase()){case"cursor":return"cursor";case"vscode":return"vscode";case"iterm.app":case"apple_terminal":case"hyper":case"wezterm":case"alacritty":return"terminal"}}catch{}if(i.VIMRUNTIME||i.VIM)return"vim";if(i.INSIDE_EMACS)return"emacs";if(["idea","webstorm","pycharm","phpstorm","intellij"].some(o=>O(t.name,o)||O(t.execPath,o)||O(t.argv0,o))||O(t.execPath,"jetbrains"))return"jetbrains";if(O(t.name,"sublime")||O(t.execPath,"sublime")||O(t.argv0,"sublime"))return"sublime";if(i.TERM&&typeof i.TERM=="string"){if(i.SSH_CLIENT||i.SSH_TTY||i.SSH_CONNECTION)return"terminal";try{let o=i.TERM.toLowerCase();if(o.includes("xterm")||o.includes("screen")||o.includes("tmux")||o==="linux"||o==="vt100"||o==="vt102")return"terminal"}catch{}}return"terminal"}catch{return"terminal"}}l(Oe,"getCodingPlatform");var Ue=l(async(i,t,e)=>{let r=new Array(i.length),o=new Set,n=!1,d=-1,f=l(async()=>{try{let a=i.map((p,m)=>m).filter(p=>!o.has(p));a.length>0&&await e(a)}catch(a){console.error("onAborted failed: ",a)}},"abortRemaining");return new Promise((a,p)=>{i.forEach((m,u)=>{m.then(async w=>{if(!n){o.add(u),r[u]=w;try{await t(u,w)?o.size===i.length&&a(r):(n=!0,d=u,await f(),a([r[d]]))}catch(b){await f(),p(b)}}}).catch(async w=>{n||(n=!0,o.add(u),await f(),p(w))})})})},"failFast"),W=process.env.JEST_WORKER_ID!==void 0||!1,v=l(i=>JSON.stringify({message:i.message,stack:i.stack}),"stringifyError"),se=l((i,t,e="s")=>i>0&&i<=1?t:`${t}${e}`,"toPlural"),ht=l((i,t)=>{let e=ee.join(i,".debug"),r=ee.join(e,"screenshots",t);return F.existsSync(e)||F.mkdirSync(e,{recursive:!0}),F.existsSync(r)||F.mkdirSync(r,{recursive:!0}),{debugRoot:e,screenshotsDir:r}},"createDebugFolder"),Le=l((i,t,e,r,o)=>{let{screenshotsDir:n}=ht(i,t),d=ee.join(n,e);F.existsSync(d)||F.mkdirSync(d,{recursive:!0});let a=Date.now().toString().slice(-4),p=`step-${r}-${a}.base64`,m=ee.join(d,p);try{return F.writeFileSync(m,o,"utf8"),s(`[DEBUG] Screenshot saved: ${m}`),m}catch(u){throw s(`[DEBUG] Failed to save screenshot: ${v(u)}`),u}},"saveScreenshot");import wt from"puppeteer";import*as Fe from"readline";var fe=class{static{l(this,"BrowserRegistry")}browsers=new Map;cleanupInProgress=!1;registryId=0;handlingError=!1;cleanupTimeout=5e3;rlInterface;constructor(t=5e3){this.cleanupTimeout=t,this.setupProcessHandlers()}setupProcessHandlers(){let t=["SIGINT","SIGTERM","SIGQUIT","SIGABRT","SIGHUP"];for(let e of t)process.on(e,()=>{s(`[BrowserRegistry] Received ${e}, cleaning up browsers...`),this.safeCleanupAndExit(0,`${e} signal`)});process.platform==="win32"&&(this.rlInterface=Fe.createInterface({input:process.stdin,output:process.stdout}),this.rlInterface.on("SIGINT",()=>{s("[BrowserRegistry] Received SIGINT (Windows), cleaning up browsers..."),this.safeCleanupAndExit(0,"Windows SIGINT")})),process.on("uncaughtException",e=>{if(this.handlingError){console.error("[BrowserRegistry] Fatal: Error during error handling:",e),process.exit(1);return}this.handlingError=!0,s(`[BrowserRegistry] Uncaught exception: ${v(e)}`),this.safeCleanupAndExit(1,"uncaught exception")}),process.on("unhandledRejection",e=>{if(this.handlingError){console.error("[BrowserRegistry] Fatal: Unhandled rejection during error handling:",e),process.exit(1);return}this.handlingError=!0,s(`[BrowserRegistry] Unhandled promise rejection: ${v(e)}`),this.safeCleanupAndExit(1,"unhandled rejection")}),process.on("beforeExit",e=>{this.browsers.size>0&&!this.cleanupInProgress&&!this.handlingError&&(s(`[BrowserRegistry] beforeExit triggered with code ${e}, ${this.browsers.size} browsers still open`),this.safeCleanupAndExit(e,"beforeExit"))}),process.on("exit",e=>{if(s(`[BrowserRegistry] Process exiting with code ${e}`),this.browsers.size>0){s(`[BrowserRegistry] WARNING: ${this.browsers.size} browsers still registered at exit!`);let r=Array.from(this.browsers.values()).map(o=>`${o.id}: ${o.description}`).join(", ");s(`[BrowserRegistry] Open browsers: ${r}`)}this.rlInterface&&this.rlInterface.close()}),s(`[BrowserRegistry] Process handlers initialized (cleanup timeout: ${this.cleanupTimeout}ms)`)}async safeCleanupAndExit(t,e){if(this.cleanupInProgress){s(`[BrowserRegistry] Cleanup already in progress for ${e}, waiting...`);return}try{await this.cleanup(),s(`[BrowserRegistry] Cleanup complete for ${e}`)}catch(r){s(`[BrowserRegistry] Cleanup failed for ${e}: ${v(r)}`)}finally{process.exit(t)}}register(t,e){let r=`browser-${++this.registryId}`;return this.browsers.set(r,{id:r,browser:t,description:e,registeredAt:Date.now()}),s(`[BrowserRegistry] Registered browser ${r}: ${e} (total: ${this.browsers.size})`),r}unregister(t){let e=this.browsers.get(t);e&&(this.browsers.delete(t),s(`[BrowserRegistry] Unregistered browser ${t}: ${e.description} (total: ${this.browsers.size})`))}getCount(){return this.browsers.size}getRegisteredBrowsers(){let t=Date.now();return Array.from(this.browsers.values()).map(e=>({id:e.id,description:e.description,registeredAt:e.registeredAt,ageMs:t-e.registeredAt}))}async cleanup(){if(this.cleanupInProgress){s("[BrowserRegistry] Cleanup already in progress, skipping...");return}this.cleanupInProgress=!0;let t=this.browsers.size;if(t===0){s("[BrowserRegistry] No browsers to cleanup");return}s(`[BrowserRegistry] Starting cleanup of ${t} browsers...`);let e=Array.from(this.browsers.values()).map(async o=>{let n=Date.now();try{s(`[BrowserRegistry] Closing browser ${o.id}: ${o.description} (age: ${n-o.registeredAt}ms)`),await o.browser.close();let d=Date.now()-n;s(`[BrowserRegistry] Successfully closed browser ${o.id} in ${d}ms`)}catch(d){let f=Date.now()-n;s(`[BrowserRegistry] Error closing browser ${o.id} after ${f}ms: ${v(d)}`)}}),r=new Promise((o,n)=>setTimeout(()=>n(new Error(`Cleanup timeout after ${this.cleanupTimeout}ms`)),this.cleanupTimeout));try{await Promise.race([Promise.allSettled(e),r]),s(`[BrowserRegistry] Normal cleanup complete. All ${t} browsers have been processed.`)}catch{s("[BrowserRegistry] Cleanup timed out, initiating force kill..."),await this.forceKill()}finally{this.browsers.clear(),this.cleanupInProgress=!1}}async forceKill(){s(`[BrowserRegistry] Force killing ${this.browsers.size} browser processes...`);let t=Array.from(this.browsers.values()).map(async e=>{try{let r=e.browser.process();r&&!r.killed?(r.kill("SIGTERM"),await new Promise(o=>setTimeout(o,100)),r.killed?s(`[BrowserRegistry] Browser process ${e.id} terminated with SIGTERM`):(r.kill("SIGKILL"),s(`[BrowserRegistry] Force killed browser process ${e.id} with SIGKILL`))):s(`[BrowserRegistry] Browser process ${e.id} already dead`)}catch(r){s(`[BrowserRegistry] Error force killing browser ${e.id}: ${v(r)}`)}});await Promise.allSettled(t),this.browsers.clear(),s("[BrowserRegistry] Force kill complete")}getDiagnostics(){let t=Date.now();return{browserCount:this.browsers.size,cleanupInProgress:this.cleanupInProgress,handlingError:this.handlingError,browsers:Array.from(this.browsers.values()).map(e=>{let r=!1;try{let o=e.browser.process();r=o?!o.killed:!1}catch{r=!1}return{id:e.id,description:e.description,ageMs:t-e.registeredAt,processAlive:r}})}}},D=new fe(5e3);import Be from"datadog-metrics";var G=pe("/tmp/mcp-evaluator-profiling.log"),me=class{static{l(this,"Profiler")}timers=new Map;datadogEnabled;constructor(){this.datadogEnabled=!!process.env.DATADOG_API_KEY,this.datadogEnabled&&(Be.init({apiKey:process.env.DATADOG_API_KEY,prefix:"mcp_evaluator_optimizer.",defaultTags:["service:mcp-evaluator-optimizer","env:production"],onError:l(t=>G(`[PROFILING] DataDog error: ${t}`),"onError")}),G("[PROFILING] DataDog profiler initialized"))}createUniqueKey(t,e){if(!e||!e.uid)throw new Error(`[PROFILING] CRITICAL: UID is required for all profiler operations. Operation: ${t}`);return`${t}-${e.uid}`}start(t,e){let r=this.createUniqueKey(t,e),o=this.formatContext(e);this.timers.set(r,{start:Date.now(),context:e}),G(`[PROFILING] START ${t}${o}`)}end(t,e){let r=this.createUniqueKey(t,e),o=this.timers.get(r);if(!o){G(`[PROFILING] ERROR: No timer found for ${t}`);return}let n=Date.now()-o.start,d={...o.context,...e},f=this.formatContext(d);G(`[PROFILING] END ${t}${f} - Duration: ${n}ms`),this.sendToDataDog(t,n,d),this.timers.delete(r)}formatContext(t){let e=[];return t.runId&&e.push(`runId=${t.runId}`),Object.keys(t).forEach(r=>{["runId"].includes(r)||e.push(`${r}=${t[r]}`)}),e.length>0?` [${e.join(", ")}]`:""}sendToDataDog(t,e,r){if(this.datadogEnabled)try{let o=t.replace(/[^a-zA-Z0-9_]/g,"_"),n=[];Be.histogram(o,e,n)}catch(o){G(`[PROFILING] Failed to send DataDog metric: ${o}`)}}},c=new me;var re=class{static{l(this,"PageFreezer")}page;client;freezeTimestamp=0;isPaused=!1;async initialize(t){return this.page=t,this.client=await t.createCDPSession(),await this.client.send("Debugger.enable"),this.client.on("Debugger.paused",()=>{this.isPaused=!0}),this.client.on("Debugger.resumed",()=>{this.isPaused=!1}),this}async freeze(){if(!this.client||!this.page)throw new Error("PageFreezer not initialized");if(!this.freezeTimestamp){this.freezeTimestamp=Date.now();let t=new Promise(e=>{if(this.isPaused){e();return}let r=l(()=>{this.client.off("Debugger.paused",r),e()},"listener");this.client.on("Debugger.paused",r)});this.client.send("Runtime.evaluate",{expression:`
                    (function() {
                        window.__freezeLoopActive = true;
                        while (window.__freezeLoopActive) {
                            // This loop will run until Debugger.pause stops it
                        }
                    })();
                `,awaitPromise:!1,userGesture:!0}).catch(()=>{}),await new Promise(e=>setTimeout(e,10)),await this.client.send("Debugger.pause"),await t,await this.client.send("Runtime.evaluate",{expression:"delete window.__freezeLoopActive;",awaitPromise:!1}).catch(()=>{}),await this.client.send("Animation.enable"),await this.client.send("Animation.setPlaybackRate",{playbackRate:0})}return this}async unfreeze(){if(!this.client)throw new Error("PageFreezer not initialized");if(this.freezeTimestamp){await this.client.send("Runtime.evaluate",{expression:"window.__freezeLoopActive = false;",awaitPromise:!1}).catch(()=>{});do try{await this.client.send("Debugger.resume"),await new Promise(t=>setTimeout(t,100))}catch(t){s(v(t))}while(this.isPaused);await this.client.send("Animation.setPlaybackRate",{playbackRate:1}),this.freezeTimestamp=0}return this}async cleanup(){this.client&&(await this.unfreeze(),await this.client.send("Debugger.disable"),await this.client.send("Animation.disable"),this.client=void 0,this.page=void 0)}};var ge=!0,ie=class{static{l(this,"BrowserController")}session;webappUrl;headless;browser;page;registryId;freezer;devicePixelRatio;constructor(t,e,r=!0){if(this.session=t,!e)throw new Error(`Invalid Webapp URL: "${e}"`);this.webappUrl=e,this.headless=r}async launchBrowser(){if(s(`[BrowserController] Launching  Puppeteer browser for session ${this.session.session_uid}`),this.browser)throw new Error("Browser already launched");let t=this.session.session_uid,e=this.session.test_id;c.start("browser-launch",{uid:t,testId:e}),this.browser=await wt.launch({headless:this.headless,defaultViewport:null,args:["--disable-extensions","--disable-plugins","--disable-dev-shm-usage","--disable-gpu","--no-first-run","--disable-default-apps","--disable-background-timer-throttling","--disable-backgrounding-occluded-windows","--disable-renderer-backgrounding","--disable-blink-features=AutomationControlled","--disable-features=TranslateUI","--disable-ipc-flooding-protection","--disable-background-networking","--disable-hang-monitor","--disable-prompt-on-repost","--memory-pressure-off"]}),c.end("browser-launch",{uid:t,testId:e,result:"success"}),this.registryId=D.register(this.browser,`BrowserController-${this.session.session_uid}`),c.start("browser-new-page",{uid:t,testId:e}),this.page=await this.browser.newPage(),c.end("browser-new-page",{uid:t,testId:e,result:"success"}),this.freezer=ge?await new re().initialize(this.page):void 0,await this.navigateToWebapp(),await this.injectControllerScript(this.session.controller_script),s(`[BrowserController] Browser launched and controller script injected for session ${this.session.session_uid}`)}#e(){if(!this.page)throw new Error("Browser page not initialized")}async navigateToWebapp(){this.#e(),s(`[BrowserController] ${this.session.session_uid} navigating to webapp "${this.webappUrl}" `),c.start("browser-navigate-to-webapp",{uid:this.session.session_uid});try{await this.page.goto(this.webappUrl,{waitUntil:"domcontentloaded",timeout:6e4}),c.end("browser-navigate-to-webapp",{uid:this.session.session_uid})}catch(t){if(c.end("browser-navigate-to-webapp",{uid:this.session.session_uid,result:"error",error:t.message}),s(`[BrowserController] Navigation failed for ${this.webappUrl}: ${t.message}`),this.webappUrl.startsWith("file://")){s("[BrowserController] Retrying file URL navigation with networkidle0");try{await this.page.goto(this.webappUrl,{waitUntil:"networkidle0",timeout:9e4}),s("[BrowserController] File URL navigation succeeded on retry")}catch(e){throw s(`[BrowserController] File URL retry also failed: ${e.message}`),e}}else throw t}}async injectControllerScript(t){this.#e(),c.start("browser-inject-controller-script",{uid:this.session.session_uid}),await this.page.evaluateOnNewDocument(t),await this.page.evaluate(t),await this.page.evaluate(()=>typeof window.__puppeteerResize=="function")||await this.page.exposeFunction("__puppeteerResize",async r=>{await this.page.setViewport(r),await this.page.evaluate(o=>{window.__puppeteerBridge.dispatchEvent(new CustomEvent("viewport-changed",{detail:o}))},r)}),c.end("browser-inject-controller-script",{uid:this.session.session_uid})}async executeScript(t){this.#e(),c.start("browser-execute-script",{uid:this.session.session_uid});try{let e,r=new Promise((o,n)=>{e=setTimeout(()=>{n(new Error("Script execution timed out after 10 seconds"))},1e4)});try{await Promise.race([this.page.evaluate(t),r])}finally{clearTimeout(e)}c.end("browser-execute-script",{uid:this.session.session_uid})}catch(e){throw c.end("browser-execute-script",{uid:this.session.session_uid,result:e.message}),s(`[BrowserController ${this.session.session_uid}] script execution failed: ${e}`),e}}async focusElement(t){this.#e();let e=`[data-qa-id="${t}"]`;try{c.start("browser-focus-element",{uid:this.session.session_uid,elementId:t}),s(`[BrowserController ${this.session.session_uid}] focusing on element: ${e}`),await this.page.focus(e),c.end("browser-focus-element",{uid:this.session.session_uid,elementId:t,result:"success"}),s(`[BrowserController ${this.session.session_uid}] successfully focused on element: ${e}`)}catch(r){throw c.end("browser-focus-element",{uid:this.session.session_uid,elementId:t,result:r.message}),s(`[BrowserController ${this.session.session_uid}] failed to focus on element ${e}: ${r}`),new Error(`Failed to focus on element with selector "${e}": ${r}`)}}async clickElement(t){this.#e();let e=`[data-qa-id="${t}"]`;try{c.start("browser-click-element",{uid:this.session.session_uid,elementId:t}),s(`[BrowserController ${this.session.session_uid}] clicking on element: ${e}`),await this.page.click(e),c.end("browser-click-element",{uid:this.session.session_uid,elementId:t,result:"success"}),s(`[BrowserController ${this.session.session_uid}] successfully clicked on element: ${e}`)}catch(r){throw c.end("browser-click-element",{uid:this.session.session_uid,elementId:t,result:r.message}),s(`[BrowserController ${this.session.session_uid}] failed to click on element ${e}: ${r}`),new Error(`Failed to click on element with selector "${e}": ${r}`)}}async pressKey(t){this.#e();try{c.start("browser-press-key",{uid:this.session.session_uid,keyCode:t}),s(`[BrowserController] ${this.session.session_uid} pressing key with keyCode: ${t}`);let e;switch(t){case 8:e="Backspace";break;case 9:e="Tab";break;case 13:e="Enter";break;case 27:e="Escape";break;case 32:e="Space";break;case 37:e="ArrowLeft";break;case 38:e="ArrowUp";break;case 39:e="ArrowRight";break;case 40:e="ArrowDown";break;case 46:e="Delete";break;default:if(t>=32&&t<=126)e=String.fromCharCode(t);else throw new Error(`Unsupported keyCode: ${t}`)}await this.page.keyboard.press(e),c.end("browser-press-key",{uid:this.session.session_uid,keyCode:t,result:"success"}),s(`[BrowserController] ${this.session.session_uid} successfully pressed key: ${e} (keyCode: ${t})`)}catch(e){throw c.end("browser-press-key",{uid:this.session.session_uid,keyCode:t,result:e.message}),s(`[BrowserController] ${this.session.session_uid} failed to press key ${t}: ${e}`),new Error(`Failed to press key with keyCode "${t}": ${e}`)}}async takeScreenshot(t){this.#e(),c.start("browser-take-screenshot",{uid:this.session.session_uid});let e=await this.page.createCDPSession(),r=await this.getDevicePixelRatio(),{data:o}=await e.send("Page.captureScreenshot",{format:"png",...t?{clip:{x:t.x0,y:t.y0,width:t.x1-t.x0,height:t.y1-t.y0,scale:r}}:{captureBeyondViewport:!0}});return c.end("browser-take-screenshot",{uid:this.session.session_uid}),o}async extractDOM(){this.#e(),c.start("browser-extract-dom",{uid:this.session.session_uid});let t=await this.page.evaluate(async()=>{try{let e=await window.scrapeDOM();return console.log("[BrowserController] [dom.callback] returning to Node"),e}catch(e){return console.error(`[BrowserController] [dom.callback error]
`,e),{error:e}}});return c.end("browser-extract-dom",{uid:this.session.session_uid,result:t.error?t.error.message:"success"}),t}async getViewportBounds(){this.#e(),c.start("browser-get-viewport-bounds",{uid:this.session.session_uid});let t=await this.page.evaluate(()=>{let e=window.scrollX,r=window.scrollY;return{x0:e,y0:r,x1:e+window.innerWidth,y1:r+window.innerHeight}});return c.end("browser-get-viewport-bounds",{uid:this.session.session_uid}),t}async getDevicePixelRatio(){if(this.#e(),this.devicePixelRatio)return this.devicePixelRatio;c.start("browser-get-device-pixel-ratio",{uid:this.session.session_uid});let t=await this.page.evaluate(()=>window.devicePixelRatio||1);return c.end("browser-get-device-pixel-ratio",{uid:this.session.session_uid}),this.devicePixelRatio=t,t}async resetPageState(){this.#e(),s(`[BrowserController] resetPageState ${this.session.session_uid}`),await this.clearPageState(),await this.navigateToWebapp(),s(`[BrowserController] Re-injecting controller script after reset ${this.session.session_uid}`),this.session.controller_script&&await this.injectControllerScript(this.session.controller_script)}async freezePage(){if(ge){if(!this.freezer)throw new Error("Page freezer not initialized");s(`[BrowserController] Freezing page for session ${this.session.session_uid}`),await this.freezer.freeze()}}async unfreezePage(){if(ge){if(!this.freezer)throw new Error("Page freezer not initialized");s(`[BrowserController] Unfreezing page for session ${this.session.session_uid}`),await this.freezer.unfreeze()}}async clearPageState(){this.#e();try{c.start("browser-clear-page-state",{uid:this.session.session_uid}),s(`=== [BrowserController] clearPageState ${this.session.session_uid} ===`),await this.page.evaluate(()=>{typeof localStorage<"u"&&localStorage.clear()}),await this.page.evaluate(()=>{typeof sessionStorage<"u"&&sessionStorage.clear()});let t=await this.page.createCDPSession();await t.send("Network.clearBrowserCache"),await t.send("Network.clearBrowserCookies"),await this.page.evaluate(()=>{for(let e=1;e<1e4;e++)clearTimeout(e),clearInterval(e)}),c.end("browser-clear-page-state",{uid:this.session.session_uid,result:"success"})}catch(t){c.end("browser-clear-page-state",{uid:this.session.session_uid,result:t.message}),s(`[BrowserController] clearPageState error ${this.session.session_uid}: ${t}`)}}async cleanup(){s(`=== [BrowserController] cleanup ${this.session.session_uid} ===`);try{this.freezer&&(await this.freezer.cleanup(),this.freezer=void 0),this.browser&&(c.start("browser-cleanup",{uid:this.session.session_uid}),await this.browser.close(),this.browser=void 0,this.page=void 0,c.end("browser-cleanup",{uid:this.session.session_uid,result:"success"}))}catch(t){c.end("browser-cleanup",{uid:this.session.session_uid,result:t.message}),s(`[BrowserController] cleanup error ${this.session.session_uid}: ${t}`)}finally{this.registryId&&(D.unregister(this.registryId),this.registryId=void 0)}}};var y=class i extends Error{static{l(this,"CritiqueError")}#e;constructor(t){super(t.feedbacks?.[0]?.text||"Critique error"),this.name="CritiqueError",this.#e={...t,decision:"CRITIQUE",metadata:{...t.metadata,evaluationTime:Date.now(),evaluatorVersion:Ne}}}toEvaluationResult(){return this.#e}static fromError(t,e){if(t instanceof i)return t;let r=String(t?.message||t||"Unknown Error");return new i({confidence:.1,feedbacks:[{text:`Error: ${r}`,structured:{violation:`EXECUTION_ERROR: ${r}`,testId:e,severity:"BLOCKING"}}]})}},q=l((i,t)=>{throw i instanceof y?i:t},"bubbleCritiqueErrorOrThrow"),he=l(i=>i instanceof Error&&(i.name==="AbortError"||i.message.includes("timeout")),"isTimeoutError");var we=class{static{l(this,"ProgressTracker")}state={progressToken:void 0,server:void 0,totalTests:0,completedTests:0};initialize(t){this.state.progressToken=t.progressToken,this.state.server=t.server,s(`[Progress] Initialized with token: ${t.progressToken}`)}setTotalTests(t){this.state.totalTests=t,s(`[Progress] Updated totalTests to: ${t}`)}notify(t,e,r){if(!this.state.progressToken||!this.state.server){s("[Progress] No token or server available, skipping notification");return}let o={progressToken:this.state.progressToken,progress:t,total:e,...r&&{message:r}};s(`[Progress] Notifying: ${t}/${e} - ${r||"no message"}`),this.state.server.notification({method:"notifications/progress",params:o}).catch(n=>{s(`[Progress] Failed to send notification: ${n}`)})}toolCalled(){this.notify(1,100,"Tool called")}toolValidated(){this.notify(2,100,"Tool validation completed")}evaluateStarted(){this.notify(3,100,"Evaluation started")}asyncPrepInitiated(){this.notify(4,100,"Async preparation initiated")}updateAsyncPreparationProgress(t,e){let r=Math.round(5+t/100*15),o=e||`Execution progress: ${t}%`;s(`[Progress] Execution progress ${t}% \u2192 ${r}%`),this.notify(r,100,o)}testsExecutionStarted(){this.notify(20,100,"Test execution started")}incrementCompletedTests(t){if(!this.state.totalTests){s("[Progress] Cannot increment completed tests - totalTests not set");return}this.state.completedTests++;let e=this.state.completedTests/this.state.totalTests,r=Math.round(Math.min(20+e*79,99));s(`[Progress] Test ${this.state.completedTests}/${this.state.totalTests} completed \u2192 ${r}% (testsProgress: ${e.toFixed(3)})`);let o=t||`Test ${this.state.completedTests}/${this.state.totalTests} completed`;this.notify(r,100,o)}complete(){this.notify(100,100,"Evaluation completed"),this.cleanup()}fail(t){this.notify(99,100,`Evaluation failed: ${t||"unknown error"}`)}completeAfterFailure(){this.notify(100,100,"Failed evaluation result returned"),this.cleanup()}cleanup(){this.state={progressToken:void 0,server:void 0,totalTests:0,completedTests:0}}},B=new we;var Me=3e4,bt=2e3,yt=3,M=class i{static{l(this,"ApiClient")}#e;#s;static apiCalls={initialize:0,async_prep:0,execution_state:0,step:0};constructor(t,e){this.#e=t,this.#s=e}get baseUrl(){return this.#e}async#t(t,e,r){let{timeoutMs:o=Me,context:n}=r,d=this.#s??e.signal;if(o){let p=AbortSignal.timeout(o);d=d?AbortSignal.any([d,p]):p}let f=await fetch(t,{...e,signal:d});if(this.#s?.aborted)throw new Error(`API call aborted: ${n}`);if(!f.ok)throw new Error(`${n} failed: ${f.status}`);let a=await f.json();if(!a)throw new Error(`API call failed, json() returned undefined: ${n}`);return a}async#r(t,e,r){let{maxRetries:o=yt,baseDelay:n=bt,timeoutMs:d=Me,context:f}=r,a,p=0;for(let m=0;m<=o;m++)try{return await this.#t(t,e,{timeoutMs:d,context:f})}catch(u){if(a=u,he(u)&&(p++,this.#s?.aborted))throw u;let w=u.message?.match(/failed: (\d+)/i);if(w){let h=parseInt(w[1]);if(![408,429,500,502,503,504].includes(h))throw u}if(m===o)throw s(`[ApiClient] ${f} failed after ${o+1} attempts. Last error: ${a.message}`),p===o+1?new Error(`Server not responding. Request timed out after ${d/1e3} seconds and was retried ${o} times. Test aborted. `):a;let b=n*Math.pow(2,m);s(`[ApiClient] ${f} attempt ${m+1} failed: ${a.message}. Retrying in ${b}ms...`),await new Promise(h=>setTimeout(h,b))}throw a}async asyncPrep(t){let e=`api-async-prep-${++i.apiCalls.async_prep}-${Date.now()}`;c.start("api-async-prep",{uid:e});let r=await this.#t(`${this.baseUrl}/mgr/api/v1/test-plans/async_prep`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)},{context:"Async QA sessions preparation",timeoutMs:6e4});return c.end("api-async-prep",{uid:e,runId:r.execution_id}),r}async getExecutionState(t){let e=`api-get-execution-state-${++i.apiCalls.execution_state}-${Date.now()}`,r=`${this.baseUrl}/mgr/api/v1/executions/${t}/state`;s(`[ApiClient.getExecutionState] ${e} - Fetching state for runId: ${t}`),s(`[ApiClient.getExecutionState] ${e} - Request URL: ${r}`),c.start("api-get-execution-state",{uid:e,runId:t});let o=await this.#t(r,{method:"GET",headers:{"Content-Type":"application/json"}},{context:"Get execution state",timeoutMs:5e3});return s(`[ApiClient.getExecutionState] ${e} - Full /state response:`),s(`[ApiClient.getExecutionState] ${e} - Response status: ${o.status}`),s(`[ApiClient.getExecutionState] ${e} - Full response body: ${JSON.stringify(o,null,2)}`),c.end("api-get-execution-state",{uid:e,runId:t,status:o.status}),o}async asyncPrepWithStatePolling(t){let e=`api-async-prep-with-polling-${Date.now()}`;c.start("api-async-prep-with-polling",{uid:e});let{execution_id:r}=await this.asyncPrep(t);s(`[ApiClient] Started async prep with runId: ${r}`),B.asyncPrepInitiated();let o=Date.now(),n=10*60*1e3,d=3e3;for(;;){if(Date.now()-o>=n)throw new Error(`Preparing timeout: Test plan preparation exceeded ${n/(60*1e3)} minutes `);try{let a=await this.getExecutionState(r);switch(s(`[ApiClient] Poll ${r}: ${a.status} - ${a.message} (${a.progress_percentage}%)`),B.updateAsyncPreparationProgress(a.progress_percentage,`${a.message} (created ${a.completed_sessions} sessions)`),a.status){case"running":case"completed":{if(!a.sessions)throw s(`[ApiClient] ERROR: Status '${a.status}' but no sessions in state response`),new Error(`'${a.status}' but no sessions`);return s(`[ApiClient] Sessions data received: ${a.sessions.length} sessions`),s(`[ApiClient] Full sessions data: ${JSON.stringify(a.sessions,null,2)}`),{sessions:a.sessions,runId:r}}case"failed":throw new y({confidence:1,feedbacks:[{text:`UNACCEPTABLE: Failed to prepare test plan - ${a.message}. The .vibe/test_plan content appears to be invalid or insufficient.`,structured:{violation:"QA_PLAN_PREPARATION_FAILED",testId:"N/A",severity:"BLOCKING",penalty:"$2000"},suggestions:[{type:"action",content:`Review and fix the .vibe/test_plan file content. Error: ${a.message}`,severity:"BLOCKING"}]}]});case"preparing":break;default:throw new Error(`Unknown execution status: ${a.status}`)}}catch(a){if(a instanceof y)throw a;he(a)?s(`[ApiClient] Poll timeout for ${r}, retrying...`):s(`[ApiClient] Poll error for ${r}: ${v(a)}
retrying...`)}finally{c.end("api-async-prep-with-polling",{uid:e,runId:r})}await new Promise(a=>setTimeout(a,d))}}async step(t,e){let r=`api-step-${++i.apiCalls.step}-${Date.now()}`;c.start("api-step",{uid:r,sessionId:t});let o=await this.#r(`${this.baseUrl}/${t}/step`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)},{context:`[${t}] QA step`});return c.end("api-step",{uid:r,sessionId:t,action:o.action}),o}async abort(t){await this.#t(`${this.baseUrl}/${t}/abort`,{method:"POST",headers:{"Content-Type":"application/json"}},{context:`[${t}] Session abort`})}async initializeTool(t){let e=`api-init-tool-${++i.apiCalls.initialize}-${Date.now()}`;c.start("api-init-tool",{uid:e});let r=await this.#t(`${this.baseUrl}/init_tool`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)},{context:"Tool initialization"});return c.end("api-init-tool",{uid:e,result:"success"}),r}};var oe=class{static{l(this,"EvaluatorTool")}tool=null;initPromise=null;async get(t){return this.tool?this.tool:this.initPromise?this.initPromise:(s("=== [EvaluatorTool] Fetching tool info ==="),this.initPromise=this.#e(t),this.initPromise)}async#e(t){try{let e=await new M(t).initializeTool({os:te(),coding_platform:Oe(),coding_agent:"claude-4-sonnet"}),r={name:e.name,description:e.description,inputSchema:JSON.parse(e.schema)};return this.tool=r,s("=== [EvaluatorTool] Tool info fetched successfully ==="),s(`Tool name: ${r.name}`),s(`Tool description: ${r.description}`),s(`Tool inputSchema: ${JSON.stringify(r.inputSchema,void 0,2)}`),r}catch(e){throw s("[EvaluatorTool] Error fetching tool definition:"),s(v(e)),this.initPromise=null,e}}};import{spawn as vt}from"child_process";var ze=l(i=>{let t=[/url:\s*(https?:\/\/[^\s]+)/i,/Local:\s*(https?:\/\/[^\s]+)/i,/Local:\s*(https?:\/\/localhost:\d+)/i,/(?:server.*?(?:running|started).*?(?:on|at)|listening.*?(?:on|at)).*?(https?:\/\/[^\s]+)/i,/(https?:\/\/localhost:\d+)/i,/(?:port|listening.*?on).*?(\d+)/i];for(let e of t){let r=i.match(e);if(r){let o=r[1];if(/^\d+$/.test(o)&&(o=`http://localhost:${o}`),o.startsWith("http://")||o.startsWith("https://"))return o}}return null},"extractUrlFromOutput");var H=class{static{l(this,"WebappController")}#e;startWebapp=l(async(t,e)=>{let r=`webapp-start-${Date.now()}`;return c.start("webapp-start",{uid:r,command:e}),new Promise((o,n)=>{s(`[WebappController] Starting webapp with command "${e}" in ${t}`);try{let d,f;if(e.startsWith("node -e")){let b=e.match(/^node -e\s+(.+)$/);if(b){let h=b[1],I=h.startsWith('"')&&h.endsWith('"')?h.slice(1,-1):h;d="node",f=["-e",I]}else throw c.end("webapp-start",{uid:r,result:"error",error:"Invalid node -e command"}),new Error(`Invalid node -e command: ${e}`)}else[d,...f]=e.split(" ");c.start("webapp-process-spawn",{uid:r,command:d});let a=vt(d,f,{cwd:t,stdio:["pipe","pipe","pipe"]});c.end("webapp-process-spawn",{uid:r,command:d,result:"success",pid:a.pid});let p=null,m={};c.start("webapp-url-detection",{uid:r});let u=l((b,h={})=>{m.current&&(clearTimeout(m.current),m.current=null);let I=typeof b=="string"?b:b.message,R=typeof b=="string"?new Error(b):b;c.end("webapp-url-detection",{uid:r,result:"error",...h}),c.end("webapp-start",{uid:r,result:"error",error:I,...h}),n(R)},"handleError"),w=l(b=>{let h=ze(b);h&&!p&&(p=h,s(`[WebappController] Detected webapp URL "${h}"`),this.#e={process:a,url:h},m.current&&(clearTimeout(m.current),m.current=null),c.end("webapp-url-detection",{uid:r,result:"success",detectedUrl:h}),c.end("webapp-start",{uid:r,result:"success",url:h}),o(this.#e))},"detectUrl");a.stdout?.on("data",b=>{let h=b.toString();s(`[WebappController] stdout: ${h}`),w(h)}),a.stderr?.on("data",b=>{let h=b.toString();s(`[WebappController] stderr: ${h}`),w(h)}),a.on("error",b=>{s("[WebappController] Error starting webapp process"),s(v(b)),u(b,{source:"process-error"})}),a.on("close",(b,h)=>{s(`Webapp process closed with code ${b} and signal ${h}`),b!==0&&!p&&u(`Webapp process exited with code ${b}`,{exitCode:b,signal:h})}),m.current=setTimeout(()=>{p||(m.current=null,u("Timeout: No webapp URL detected within 30 seconds",{source:"timeout"}))},3e4)}catch(d){c.end("webapp-start",{uid:r,result:"error",error:d.message}),n(d)}})},"startWebapp");stopWebapp=l(()=>new Promise(t=>{if(this.#e&&!this.#e.process.killed){let e=`webapp-stop-${Date.now()}`;c.start("webapp-stop",{uid:e}),s("[WebappController] Stopping webapp process");let r=this.#e.process,o=!1,n=l(()=>{o||(o=!0,c.end("webapp-stop",{uid:e,result:"success",pid:r.pid}),this.#e=void 0,global.gc&&global.gc(),t())},"cleanup");r.once("exit",n),r.kill("SIGTERM"),setTimeout(()=>{!r.killed&&!o&&(s("[WebappController] Process didn't exit gracefully, sending SIGKILL"),r.kill("SIGKILL"))},1e3),setTimeout(()=>{o||(s("[WebappController] Force resolving after timeout"),n())},3e3)}else this.#e=void 0,t()}),"stopWebapp");get webapp(){return this.#e}};import Qe from"fs";var ne=l(async i=>{let t=`webapp-validation-${Date.now()}`;if(i.startsWith("file:///")){c.start("webapp-file-validation",{uid:t,url:i});let e=i.replace("file://",""),{access:r}=Qe.promises;await r(e,Qe.constants.F_OK),c.end("webapp-file-validation",{uid:t,result:"success",filePath:e}),s(`[validateWebappUrl] Confirmed file exists at ${i}`)}else{c.start("webapp-http-validation",{uid:t,url:i});let e=new AbortController,r=setTimeout(()=>e.abort(),2e3),o=await fetch(i,{method:"HEAD",signal:e.signal});if(clearTimeout(r),!o.ok){let n=new Error(`Server responded with status ${o.status}`);throw c.end("webapp-http-validation",{uid:t,result:"error",httpStatus:o.status,error:n.message}),n}s(`[validateWebappUrl] Confirmed server is running at ${i}`),c.end("webapp-http-validation",{uid:t,result:"success",httpStatus:o.status})}},"validateWebappUrl");import je from"path";import J from"fs";import{randomUUID as At}from"node:crypto";import{cpus as It,freemem as Ct,totalmem as xt}from"node:os";import{execSync as _t}from"node:child_process";import St from"path";import Tt from"fs";import{parse as Et}from"csv-parse";var ae=l(async i=>new Promise(t=>{let e=0,r=!1,o=Et({delimiter:"|",skip_empty_lines:!0,trim:!0});o.on("readable",function(){let n;for(;n=o.read();)e++,!(typeof n[0]=="string"&&n[0].startsWith("#"))&&n.length>3&&(r=!0)}),o.on("error",function(n){t({isValid:!1,error:n.message})}),o.on("end",function(){t({isValid:e>0&&r,error:r?void 0:"CSV must have rows with more than 3 columns"})}),o.write(i),o.end()}),"validateCSVFormat");import{parse as $t}from"csv-parse";var be=l(async(i,t,e)=>(s("[filterTestPlanCSV] Starting CSV filtering..."),s(`[filterTestPlanCSV] testIndex: ${t}, testId: ${e}`),s(`[filterTestPlanCSV] CSV content length: ${i.length}`),new Promise((r,o)=>{let n=[],d,f=0,a=!1,p;s("[filterTestPlanCSV] Initializing CSV parser...");let m=$t({delimiter:"|",skip_empty_lines:!0,trim:!0});m.on("readable",function(){let u;for(;u=m.read();){if(s(`[filterTestPlanCSV] Parsing row: ${JSON.stringify(u)}`),typeof u[0]=="string"&&u[0].startsWith("#")){s(`[filterTestPlanCSV] Found header row: ${JSON.stringify(u)}`),d=u;continue}if(f++,s(`[filterTestPlanCSV] Processing data row ${f}: ${JSON.stringify(u)}`),t&&f===t)s(`[filterTestPlanCSV] Found target row by index ${t}: ${JSON.stringify(u)}`),p=u,a=!0;else if(e&&u.length>0){let w=u[0]?.trim();s(`[filterTestPlanCSV] Checking testId: "${w}" vs target "${e}"`),w===e&&(s(`[filterTestPlanCSV] Found target row by testId "${e}": ${JSON.stringify(u)}`),p=u,a=!0)}}}),m.on("error",function(u){s(`[filterTestPlanCSV] Error parsing CSV: ${u.message}`),o(u)}),m.on("end",function(){if(s("[filterTestPlanCSV] ========== CSV parser 'end' event triggered =========="),s(`[filterTestPlanCSV] foundTest: ${a}`),s(`[filterTestPlanCSV] targetRow exists: ${!!p}`),s(`[filterTestPlanCSV] headerRow exists: ${!!d}`),!a||!p){t?s(`[filterTestPlanCSV] Test index ${t} not found, returning original CSV`):e&&s(`[filterTestPlanCSV] Test ID "${e}" not found, returning original CSV`),s(`[filterTestPlanCSV] Resolving with original CSV (length: ${i.length})`),r(i);return}let u=[];d&&(u.push(d.join("|")),s(`[filterTestPlanCSV] Added header row: ${d.join("|")}`)),p&&(u.push(p.join("|")),s(`[filterTestPlanCSV] Added target row: ${p.join("|")}`));let w=u.join(`
`);t?s(`[filterTestPlanCSV] \u2705 Successfully filtered CSV to test index ${t}`):e&&s(`[filterTestPlanCSV] \u2705 Successfully filtered CSV to test ID "${e}"`),s(`[filterTestPlanCSV] Filtered CSV content (length: ${w.length}):
${w}`),s("[filterTestPlanCSV] ========== Resolving promise with filtered CSV =========="),r(w)}),s(`[filterTestPlanCSV] Writing CSV content to parser (${i.length} characters)...`),m.write(i),s("[filterTestPlanCSV] Calling parser.end()..."),m.end()})),"filterTestPlanCSV");var ye=l(i=>{let t=St.join(i,".vibe","test_plan");return Tt.readFileSync(t,"utf8")},"readTestPlanRaw"),Ve=l(async i=>{try{let t=ye(i);if(!(await ae(t)).isValid)return s("[assertTestPlanFile] Returning CRITIQUE - Invalid or empty test plan file"),new y({confidence:1,feedbacks:[{text:"UNACCEPTABLE: Empty or invalid test plan in .vibe/test_plan file. FORBIDDEN to continue without a detailed test plan for the entire project.",structured:{violation:"MANDATORY_QA_PLAN",testId:"N/A",severity:"BLOCKING",penalty:"$2000"},suggestions:[{type:"action",content:"RULE 1: Create comprehensive QA test plan in CSV format in .vibe/test_plan file covering the entire project. NO SHORTCUTS.",severity:"BLOCKING"}]}]});s("[assertTestPlanFile] Test plan file validated successfully");return}catch(t){let e=t.message.toLowerCase();return e.includes("enoent")||e.includes("no such file")?(s("[assertTestPlanFile] Returning CRITIQUE - Missing .vibe/test_plan file"),new y({confidence:1,feedbacks:[{text:"UNACCEPTABLE: Missing .vibe/test_plan file. FORBIDDEN to continue without a detailed test plan for the entire project.",structured:{violation:"MANDATORY_QA_PLAN",testId:"N/A",severity:"BLOCKING",penalty:"$2000"},suggestions:[{type:"action",content:"RULE 1: Create comprehensive QA test plan in .vibe/test_plan file covering the entire project. Step-by-step instructions. NO SHORTCUTS.",severity:"BLOCKING"}]}]})):(s("[assertTestPlanFile] Returning CRITIQUE - Error reading .vibe/test_plan file"),new y({confidence:1,feedbacks:[{text:`UNACCEPTABLE: Error reading .vibe/test_plan file: ${e}! FORBIDDEN to continue without accessible test plan.`,structured:{violation:"QA_PLAN_ACCESS_ERROR",testId:"N/A",severity:"BLOCKING",penalty:"$2000"},suggestions:[{type:"action",content:`Ensure .vibe/test_plan file exists and is readable. Error: ${e}`,severity:"BLOCKING"}]}]}))}},"assertTestPlanFile");import Pt from"path";import Rt from"fs";var ve=l(i=>{let t=Pt.join(i,".vibe","user_flows");try{return Rt.readFileSync(t,"utf8")}catch(e){let r=e.message.toLowerCase();if(r.includes("enoent")||r.includes("no such file"))return s("[readUserFlowsRaw] User flows file not found, returning empty content"),"";throw e}},"readUserFlowsRaw"),Ge=l(async i=>{try{let t=ve(i);if(!t.trim()){s("[assertUserFlowsFile] User flows file not found or empty, continuing without user flows");return}if(!(await ae(t)).isValid)return s("[assertUserFlowsFile] Returning CRITIQUE - Invalid user flows file format"),new y({confidence:1,feedbacks:[{text:"Invalid user flows format in .vibe/user_flows file. Please provide valid CSV format or remove the file to proceed without user flows.",structured:{violation:"INVALID_USER_FLOWS_FORMAT",testId:"N/A",severity:"BLOCKING",penalty:"$500"},suggestions:[{type:"action",content:"Fix the CSV format in .vibe/user_flows file or remove the file to proceed without user flows documentation.",severity:"HIGH"}]}]});s("[assertUserFlowsFile] User flows file validated successfully");return}catch(t){let e=t.message.toLowerCase();if(e.includes("enoent")||e.includes("no such file")){s("[assertUserFlowsFile] User flows file not found, continuing without user flows");return}return s("[assertUserFlowsFile] Returning CRITIQUE - Error reading .vibe/user_flows file"),new y({confidence:1,feedbacks:[{text:`Error reading .vibe/user_flows file: ${e}. Please fix the file permissions or remove the file to proceed without user flows.`,structured:{violation:"USER_FLOWS_ACCESS_ERROR",testId:"N/A",severity:"BLOCKING",penalty:"$500"},suggestions:[{type:"action",content:`Fix file permissions for .vibe/user_flows or remove the file to proceed without user flows. Error: ${e}`,severity:"HIGH"}]}]})}},"assertUserFlowsFile");var Dt=l(i=>/^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(i.trim()),"isValidUUID"),We=l(i=>{let t=je.join(i,".vibe"),e=je.join(t,"uid");J.existsSync(t)||J.mkdirSync(t,{recursive:!0});let r;try{if(J.existsSync(e)){let o=J.readFileSync(e,"utf8").trim();if(Dt(o))return o;s(`[readAppUID] Invalid UUID found in ${e}, replacing with new one`)}return r=At(),J.writeFileSync(e,r,"utf8"),s(`[readAppUID] Generated new app UID: ${r}`),r}catch(o){throw s("[readAppUID] Error reading UID:"),s(v(o)),o}},"readAppUID"),qe=l(async i=>Nt(i.projectFolderPath)??kt(i)??await Ot(i)??await Ve(i.projectFolderPath)??await Ge(i.projectFolderPath)??await Ut(i),"assertEvaluationRequest"),Nt=l(i=>{if(!i)return s("[assertEvaluationRequest] Returning CRITIQUE - Missing project folder path"),new y({confidence:1,feedbacks:[{text:"UNACCEPTABLE: Missing projectFolderPath. FORBIDDEN to proceed without project path.",structured:{violation:"MANDATORY_PROJECT_PATH",testId:"N/A",severity:"BLOCKING",penalty:"$1000"},suggestions:[{type:"action",content:`RULE 1: Provide the absolute path to the project folder (e.g., '/path/to/project').
                                NO EXCEPTIONS.`,severity:"HIGH"}]}]})},"assertProjectFolderPath"),kt=l(i=>{let{projectRunCommand:t,projectRunUrl:e}=i;if(!e&&!t)return s("[assertEvaluationRequest] Returning CRITIQUE - Missing project run command"),new y({confidence:1,feedbacks:[{text:"UNACCEPTABLE: Missing projectRunCommand. FORBIDDEN to proceed without run command or running server address.",structured:{violation:"MANDATORY_PROJECT_RUN_COMMAND",testId:"N/A",severity:"BLOCKING",penalty:"$1000"},suggestions:[{type:"action",content:`RULE 2: Either provide the run command to start the project locally (e.g., 'yarn dev' or 'npm start') OR provide the projectRunUrl of an already running server.
                            NO EXCEPTIONS.`,severity:"HIGH"}]}]})},"assertProjectRunCommand"),Ot=l(async i=>{let{projectRunUrl:t}=i;if(t){if(!/^(https?|file):\/\/\S*$/.test(t))return s("[assertEvaluationRequest] Returning CRITIQUE - Invalid project run address format"),new y({confidence:1,feedbacks:[{text:`UNACCEPTABLE: Invalid projectRunUrl format '${t}'. Must be a valid HTTP/HTTPS/FILE URL.`,structured:{violation:"INVALID_PROJECT_RUN_ADDRESS",testId:"N/A",severity:"BLOCKING",penalty:"$500"},suggestions:[{type:"action",content:"Provide a valid URL format for projectRunUrl (e.g., 'http://localhost:3000', 'https://localhost:8080', 'file:///path/to/file.html').",severity:"HIGH"}]}]});try{await ne(t)}catch(r){return s("validateWebappUrl Error:"),s(v(r)),new y({confidence:1,feedbacks:[{text:`UNACCEPTABLE: Unaccessible projectRunUrl '${t}'.`,structured:{violation:"UNACCESSIBLE_PROJECT_RUN_ADDRESS",testId:"N/A",severity:"BLOCKING",penalty:"$500"},suggestions:[{type:"action",content:"Provide an accessible URL for projectRunUrl",severity:"HIGH"}]}]})}}},"assertProjectRunUrl"),Ut=l(async i=>{let{targetTests:t}=i;if(t){if(!Array.isArray(t))return s("[assertTargetTests] Returning CRITIQUE - targetTests must be an array"),new y({confidence:1,feedbacks:[{text:"UNACCEPTABLE: targetTests must be an array. FORBIDDEN to proceed with invalid format.",structured:{violation:"INVALID_TARGET_TESTS_FORMAT",testId:"N/A",severity:"BLOCKING",penalty:"$500"},suggestions:[{type:"action",content:"Provide targetTests as an array of objects with testId and context fields.",severity:"HIGH"}]}]});for(let e=0;e<t.length;e++){let r=t[e];if(!r||typeof r!="object")return s(`[assertTargetTests] Returning CRITIQUE - targetTests[${e}] must be an object`),new y({confidence:1,feedbacks:[{text:`UNACCEPTABLE: targetTests[${e}] must be an object. FORBIDDEN to proceed with invalid format.`,structured:{violation:"INVALID_TARGET_TEST_ITEM",testId:"N/A",severity:"BLOCKING",penalty:"$500"},suggestions:[{type:"action",content:"Each targetTest item must be an object with testId and context fields.",severity:"HIGH"}]}]});if(!r.testId||typeof r.testId!="string")return s(`[assertTargetTests] Returning CRITIQUE - targetTests[${e}].testId must be a string`),new y({confidence:1,feedbacks:[{text:`UNACCEPTABLE: targetTests[${e}].testId must be a string. FORBIDDEN to proceed without valid testId.`,structured:{violation:"MISSING_TARGET_TEST_ID",testId:"N/A",severity:"BLOCKING",penalty:"$500"},suggestions:[{type:"action",content:"Provide a valid testId string that matches a testId in test_plan.",severity:"HIGH"}]}]});if(!r.context||typeof r.context!="string")return s(`[assertTargetTests] Returning CRITIQUE - targetTests[${e}].context must be a string`),new y({confidence:1,feedbacks:[{text:`UNACCEPTABLE: targetTests[${e}].context must be a string. FORBIDDEN to proceed without context.`,structured:{violation:"MISSING_TARGET_TEST_CONTEXT",testId:"N/A",severity:"BLOCKING",penalty:"$500"},suggestions:[{type:"action",content:"Provide a context string explaining why this test is being re-run.",severity:"HIGH"}]}]})}s(`[assertTargetTests] Validated ${t.length} target tests structure successfully`)}},"assertTargetTests"),He=l(i=>{let t=i.filter(({result:r,error:o})=>o||r?.decision!=="PASS");if(t.length){let r=t.map(({result:d,error:f})=>d||f?.toEvaluationResult()),o=r.flatMap(d=>d.feedbacks||[]).filter(d=>!!d?.text?.trim()||!!d.structured?.violation);return{decision:"CRITIQUE",confidence:Math.max(...r.map(d=>d.confidence)),feedbacks:o,metadata:{parallelExecutions:i.length}}}let e=i.flatMap(({result:r})=>r.feedbacks||[]).filter(r=>!!r?.text?.trim());return{decision:"PASS",confidence:i.length>0?Math.min(...i.map(({result:r})=>r.confidence)):0,feedbacks:e,metadata:{parallelExecutions:i.length}}},"aggregateTestResults");function Je(i=6){try{let t=It().length,e=Math.round(xt()/1024/1024),r=Math.round(Ct()/1024/1024),o=te(),n=1/0;try{if(o!=="windows"){let u=_t("ulimit -n",{encoding:"utf8",timeout:1e3}).trim(),w=parseInt(u);!isNaN(w)&&w>0&&(n=Math.floor(w/60),s(`[calculateOptimalParallelInstances] File descriptor limit: ${w}, allowing ~${n} instances`))}}catch(u){s(`[calculateOptimalParallelInstances] Could not check file descriptor limits: ${u}`)}let d=150,f;if(r<2048){let u;e<=8192?u=800:e<=16384?u=1200:e<=32768?u=1800:u=2400,f=Math.max(1,Math.min(Math.floor(u/d),10)),s(`[calculateOptimalParallelInstances] Memory pressure detected (${r}MB free), using tiered allocation: ${u}MB available for ${e}MB system`)}else{let u=Math.min(2048,Math.max(1024,r*.2)),w=Math.max(0,r-u);f=Math.floor(w/d)}let a=Math.max(1,Math.min(Math.floor(t*2),14)),p;switch(o){case"macos":p=Math.min(t*2+4,16);break;case"linux":p=Math.min(t*2+6,18);break;case"windows":p=Math.min(t*2,12);break;default:p=Math.min(t*2,12)}let m=Math.max(1,Math.min(f,a,p,n,16));return s(`[calculateOptimalParallelInstances] System info: ${t} CPUs, ${e.toLocaleString()}MB total RAM, ${r.toLocaleString()}MB free RAM, OS: ${o}`),s(`[calculateOptimalParallelInstances] Memory calculation: Per instance ${d}MB, Memory-based limit: ${f}`),s(`[calculateOptimalParallelInstances] Calculated limits - Memory: ${f}, CPU: ${a}, Platform: ${p}, FD: ${n===1/0?"unlimited":n}`),s(`[calculateOptimalParallelInstances] Selected optimal instances: ${m}`),m}catch(t){return s(`[calculateOptimalParallelInstances] Error calculating optimal instances: ${t}`),s(`[calculateOptimalParallelInstances] Falling back to default: ${i}`),i}}l(Je,"calculateOptimalParallelInstances");var Ee=l((i,t,e)=>(s(`[toDashboardSessionUpdate] session: ${i.session_uid}, currentStep: ${t}, test_steps: ${JSON.stringify(i.test_steps)}`),{sessionUid:i.session_uid,currentStep:t,totalSteps:i.test_steps.length,taskName:i.test_name,taskDescription:i.test_description,testId:i.test_id,stepDescriptions:i.test_steps.map((r,o)=>(s(`[buildDashboardSession] Step ${o}: ${JSON.stringify(r)}`),s(`[buildDashboardSession] Step ${o} action type: ${typeof r.action}, value: ${JSON.stringify(r.action)}`),typeof r.action=="string"?r.action:(s(`[buildDashboardSession] WARNING: Step ${o} action is not a string, converting: ${JSON.stringify(r.action)}`),String(r.action||"Unknown action")))),lastUpdate:Date.now(),screenshot:e}),"toDashboardSessionUpdate"),Ke=l(i=>{for(let t=0;t<i.length;t++){let e=i[t];if(!e.session_uid)throw new Error(`No session uid found in session ${t}`);if(!e.test_id)throw new Error(`No test ID found in session ${e.session_uid}`);if(!e.test_name&&!e.test_description)throw new Error(`No test name nor description found in session ${e.session_uid}`);if(!e.test_steps?.filter(r=>(r&&typeof r.action!="string"&&s(`[assertQASessions] Invalid action type in session ${e.session_uid}: action=${JSON.stringify(r.action)}, step=${JSON.stringify(r)}`),r?.action&&typeof r.action=="string"&&r.action.trim().length>0)).length)throw new Error(`No valid test steps found in session ${e.session_uid}`)}},"assertQASessions");import*as z from"path";import*as $e from"fs";import{fileURLToPath as Lt}from"url";import Ft from"puppeteer";var Ye=l((i,t)=>{s(`[fromQASessionToDashboardSession] session: ${i.session_uid}, test_steps: ${JSON.stringify(i.test_steps)}`);let e=i.test_steps.map((r,o)=>(s(`[fromQASessionToDashboardSession] Step ${o}: ${JSON.stringify(r)}`),s(`[fromQASessionToDashboardSession] Step ${o} action type: ${typeof r.action}, value: ${JSON.stringify(r.action)}`),typeof r.action=="string"?r.action:(s(`[fromQASessionToDashboardSession] WARNING: Step ${o} action is not a string, converting: ${JSON.stringify(r.action)}`),String(r.action||"Unknown action"))));return{sessionUid:i.session_uid,position:t,status:"pending",taskName:i.test_name,taskDescription:i.test_description,testId:i.test_id,currentStep:0,totalSteps:i.test_steps.length,stepDescriptions:e,lastUpdate:Date.now()}},"fromQASessionToDashboardSession");var Bt=Lt(import.meta.url),Ze=z.dirname(Bt),U,E,le,V={maxRetries:3,retryDelay:1e3,recoveryDelay:500},et=l(i=>{let t=i;for(;t!==z.dirname(t);){let e=z.join(t,"package.json");if($e.existsSync(e))return t;t=z.dirname(t)}return process.cwd()},"findProjectRoot");async function Mt(){try{if(s("\u{1F504} Attempting to recover dashboard page connection..."),!U||!U.isConnected())return s("\u274C Dashboard browser is disconnected, cannot recover"),!1;let t=(await U.pages()).find(n=>!n.isClosed());if(t)return E=t,s("\u2705 Recovered dashboard page connection"),!0;let e=et(Ze),o=`file://${z.join(e,"src/dashboard/index.html")}`;return E=await U.newPage(),await E.goto(o),E.on("console",async n=>{let d=n.text();if((d.includes("EXTERNAL_URL_REQUEST")||d.includes("Opening external app dashboard"))&&s(`[Dashboard Console] ${d}`),d.startsWith("EXTERNAL_URL_REQUEST:")){let f=d.replace("EXTERNAL_URL_REQUEST:","").trim();s(`[Dashboard] Opening external URL in system browser: ${f}`);let{default:a}=await import("open");try{await a(f),s(`[Dashboard] Successfully opened ${f} in system browser`)}catch(p){s(`[Dashboard] Failed to open ${f}: ${p.message}`)}}}),await E.evaluate(()=>{window.addEventListener("openExternalUrl",n=>{console.log("EXTERNAL_URL_REQUEST:",n.detail.url)})}),await new Promise(n=>setTimeout(n,V.recoveryDelay)),s(`\u2705 Created new dashboard page and navigated to ${o}`),!0}catch(i){return s(`\u274C Failed to recover dashboard page: ${i}`),!1}}l(Mt,"recoverDashboardPage");async function K(i,t,e){let r=null;for(let o=1;o<=V.maxRetries;o++)try{return await i()}catch(n){r=n;let d=e?` for session ${e}`:"";if(s(`\u26A0\uFE0F Dashboard error in ${t}${d} (attempt ${o}/${V.maxRetries}): ${r.message}`),o===V.maxRetries){s(`\u274C Max retries reached for ${t}${d}`);break}if(!await Mt()){s(`\u274C Failed to recover dashboard page, stopping retries for ${t}${d}`);break}await new Promise(a=>setTimeout(a,V.retryDelay)),s(`\u{1F504} Retrying ${t}${d} (attempt ${o+1}/${V.maxRetries})`)}if(r){let o=e?` for session ${e}`:"";s(`\u274C Failed to execute ${t}${o} after ${V.maxRetries} attempts: ${r.message}`)}return null}l(K,"executeWithRetry");var tt=l(async(i,t,e,r)=>{try{s(`\u{1F680} Opening Puppeteer dashboard with ${i.length} sessions`);let o=et(Ze),n=z.join(o,"src/dashboard/index.html");if(!$e.existsSync(n))throw new Error(`Dashboard HTML file not found at: ${n}`);if(U&&E)return s("\u{1F504} Reusing existing dashboard browser instance"),await Xe(t,i,e,r);let d=`file://${n}`;return U=await Ft.launch({headless:!1,defaultViewport:null,protocolTimeout:0,args:["--no-sandbox","--disable-setuid-sandbox","--start-maximized","--app="+d,"--disable-web-security","--disable-features=VizDisplayCompositor","--disable-background-timer-throttling","--disable-renderer-backgrounding","--disable-backgrounding-occluded-windows","--disable-infobars","--disable-session-crashed-bubble","--disable-translate","--no-first-run","--disable-default-apps"]}),le=D.register(U,"Dashboard-Browser"),E=(await U.pages())[0],E.on("console",async a=>{let p=a.text();if((p.includes("EXTERNAL_URL_REQUEST")||p.includes("Opening external app dashboard"))&&s(`[Dashboard Console] ${p}`),p.startsWith("EXTERNAL_URL_REQUEST:")){let m=p.replace("EXTERNAL_URL_REQUEST:","").trim();s(`[Dashboard] Opening external URL in system browser: ${m}`);let{default:u}=await import("open");try{await u(m),s(`[Dashboard] Successfully opened ${m} in system browser`)}catch(w){s(`[Dashboard] Failed to open ${m}: ${w.message}`)}}}),await E.evaluate(()=>{window.addEventListener("openExternalUrl",a=>{console.log("EXTERNAL_URL_REQUEST:",a.detail.url)})}),U.on("disconnected",()=>{s("\u{1F534} Dashboard browser disconnected"),le&&(D.unregister(le),le=void 0),U=void 0,E=void 0}),s(`\u2705 Dashboard opened in maximized app mode: file://${n}`),await Xe(t,i,e,r)}catch(o){s(`\u274C Failed to open dashboard: ${o}`);return}},"openRealtimeBrowser");async function Xe(i,t,e,r){if(s(`[initializeDashboardData] manual filter: ${i}, num of total sessions: ${t.length}`),!E)return;let o=i?await zt(t):void 0;if(i&&!o?.length)throw new Error("Manual filter enabled, but no tests were selected");let n=o?.length?t.filter(a=>o.includes(a.test_id)):t;s(`[initializeDashboardData] num of filtered sessions: ${n.length}`);let d=n.map((a,p)=>Ye(a,p));return await K(async()=>{await E.evaluate((a,p,m)=>{window.addEventListener("openExternalUrl",u=>{console.log("EXTERNAL_URL_REQUEST:",u.detail.url)}),window.dispatchEvent(new CustomEvent("dashboardInit",{detail:{sessions:a,appUid:p,apiUrl:m}}))},d,e,r)},"initializeDashboardData")!==null&&s(`\u{1F4CA} Dashboard initialized with ${d.length} sessions`),o}l(Xe,"initializeDashboardData");async function zt(i){if(E)try{s(`\u{1F3AF} Showing test filtering UI for ${i.length} tests`);let t=i.map(r=>({id:r.test_id,title:r.test_name||r.test_description})),e=await E.evaluate(`
            (function(tests) {
                return new Promise(function(resolve) {
                    console.log('\u{1F3AF} [PAGE] Starting filtering UI with ' + tests.length + ' tests');

                    // Dispatch event to show filtering UI
                    window.dispatchEvent(
                        new CustomEvent("showTestFilter", {
                            detail: { tests: tests },
                        })
                    );

                    console.log('\u23F3 [PAGE] Waiting for user selection...');

                    // Wait for user to make selection
                    var handleFilterComplete = function(event) {
                        var customEvent = event;
                        console.log(
                            '\u{1F389} [PAGE] Filter complete event received with IDs:',
                            customEvent.detail.selectedTestIds
                        );
                        window.removeEventListener("filterComplete", handleFilterComplete);
                        resolve(customEvent.detail.selectedTestIds);
                    };
                    window.addEventListener("filterComplete", handleFilterComplete);
                    console.log(
                        '\u{1F442} [PAGE] Event listener set up, waiting for filterComplete event'
                    );
                });
            })(${JSON.stringify(t)})
                `);return s(`\u2705 User selected ${e?.length||0} ${se(e?.length||0,"test")}: ${e?.join(", ")||"none"}`),e}catch(t){s(`\u274C Failed to show test filtering UI: ${t}`);return}}l(zt,"showTestFilteringUI");var st=l(async i=>{if(!E)return;await K(async()=>{await E.evaluate(e=>{window.dispatchEvent(new CustomEvent("dashboardRunning",{detail:{sessionUid:e}}))},i)},"markDashboardSessionRunning",i)!==null&&s(`\u{1F504} Dashboard session ${i} marked as running`)},"markDashboardSessionRunning"),Se=l(async i=>{if(!E){s(`\u26A0\uFE0F Dashboard not available for session ${i.sessionUid}`);return}await K(async()=>{await E.evaluate(e=>{let r={sessionUid:e.sessionUid,status:"running",currentStep:e.currentStep,totalSteps:e.totalSteps,taskName:e.taskName,taskDescription:e.taskDescription,stepDescriptions:e.stepDescriptions,lastUpdate:Date.now(),testId:e.testId};window.dispatchEvent(new CustomEvent("dashboardUpdate",{detail:{sessionUid:e.sessionUid,data:r,screenshot:e.screenshot}}))},i)},"updateDashboardSession",i.sessionUid)!==null&&s(`\u{1F4C8} Dashboard updated for session ${i.sessionUid}`)},"updateDashboardSession"),Te=l(async(i,t)=>{if(!E)return;await K(async()=>{await E.evaluate((r,o)=>{window.dispatchEvent(new CustomEvent("dashboardComplete",{detail:{sessionUid:r,result:o}}))},i,t)},"markDashboardSessionComplete",i)!==null&&s(`\u{1F3C1} Dashboard session ${i} marked as ${t.decision} (kept visible)`)},"markDashboardSessionComplete"),Pe=l(async i=>{if(!E)return;await K(async()=>{await E.evaluate(e=>{window.dispatchEvent(new CustomEvent("dashboardAborted",{detail:{sessionUid:e}}))},i)},"markDashboardSessionAborted",i)!==null&&s(`\u{1F6D1} Dashboard session ${i} marked as aborted`)},"markDashboardSessionAborted");import Qt from"p-limit";var ce=class i{static{l(this,"EvaluatorOptimizer")}static evalCalls=0;tool=new oe;args;constructor(t){this.args=t}async evaluate(t){let e=`evaluate-${++i.evalCalls}-${Date.now()}`;c.start("evaluate",{uid:e});try{s("=== [EvaluatorOptimizer] evaluate called: ===");let r=JSON.stringify(t,null,2);s(r),c.start("evaluate-request-validation",{uid:e});let o=await qe(t);if(c.end("evaluate-request-validation",{uid:e,hasError:!!o}),o)throw c.end("evaluate",{uid:e,result:"assertion-error"}),s("=== [EvaluatorOptimizer] assertion error: ==="),s(JSON.stringify(o,null,2)),o;s("=== [EvaluatorOptimizer] Starting parallel QA automation workflow ==="),B.evaluateStarted();let n=await this.executeQAWorkflow(t),d=n.decision==="PASS";return c.end("evaluate",{uid:e,result:n.decision}),{...n,systemNotifications:n.systemNotifications||[{type:d?"success":"warning",message:d?`${Z} has completed the evaluation. All passed!`:`${Z} has found ${n.feedbacks.length} ${se(n.feedbacks.length,"issue")}. I'm on it!`,priority:"high",actionRequired:!d}]}}catch(r){throw c.end("evaluate",{uid:e,result:"error"}),s("=== [EvaluatorOptimizer] Error during evaluation: ==="),s(v(r)),q(r,new y({confidence:.1,feedbacks:[{text:"SYSTEM ERROR: Evaluator offline. FORBIDDEN to proceed without validation.",structured:{violation:`EVALUATOR_FAILURE: ${r.message}`,testId:"N/A",penalty:"$500"}}],metadata:{error:r.message},systemNotifications:[{type:"error",message:`${Z} is offline. Please contact support for assistance.`,priority:"high",actionRequired:!0}]})),r}}async executeQAWorkflow(t){let e=`workflow-${i.evalCalls}-${Date.now()}`;c.start("executeQAWorkflow",{uid:e});let{projectFolderPath:r,projectRunCommand:o,projectRunUrl:n,appDescription:d,targetTests:f,userPrompt:a}=t,{start:p,only:m,onlyIndex:u,onlyTestId:w,ignoreIndices:b,ignoreStrings:h,"fail-fast":I,"manual-filter":R}=this.args,C,$;try{if(c.start("webapp-setup",{uid:e}),n)try{await ne(n),C=n,s(`[EvaluatorOptimizer] Using provided webapp URL: ${n}`)}catch(g){c.end("webapp-setup",{uid:e,result:"url-validation-failed"}),c.end("executeQAWorkflow",{uid:e,result:"url-validation-failed"}),s("[EvaluatorOptimizer] Failed to validate provided webapp URL"),s(v(g));let T=n?.startsWith("file:///");throw new y({confidence:.1,feedbacks:[{text:T?`Cannot access the specified file at ${n}. Please ensure the file exists and is accessible.`:`Cannot connect to the specified running server at ${n}. Please ensure the server is running and accessible.`,structured:{violation:`${T?"FILE_NOT_FOUND":"RUNNING_SERVER_UNAVAILABLE"}: ${g?.message||"Unknown error"}`,testId:"N/A",severity:"BLOCKING"},suggestions:[{type:"action",content:T?`Verify that the file exists at the specified path: ${n}`:`Verify that the development server is running at ${n} and accessible.`,severity:"HIGH"}]}]})}else if(o)try{$=new H,C=(await $.startWebapp(r,o)).url,s(`[EvaluatorOptimizer] Started webapp at "${C}"`)}catch(g){throw c.end("webapp-setup",{uid:e,result:"webapp-start-failed"}),c.end("executeQAWorkflow",{uid:e,result:"webapp-start-failed"}),s("[EvaluatorOptimizer] Failed to start webapp"),s(v(g)),new y({confidence:.9,feedbacks:[{text:`Failed to start webapp: ${g.message}`,structured:{violation:`WEBAPP_START_FAILURE: ${g.message}`,testId:"N/A",severity:"BLOCKING"},suggestions:[{type:"action",content:"Check the project run command and ensure all dependencies are installed.",severity:"HIGH"}]}]})}if(!C)throw new Error("No webapp URL available - this should not happen");c.end("webapp-setup",{uid:e,webappUrl:C});let _=r.split("/").filter(Boolean).pop()||"unknown-app";s(`[EvaluatorOptimizer] Starting QA workflow for "${_}"`),c.start("sessions-preparation",{uid:e});let P=We(r),Q=ye(r);if(u||w){s("[EvaluatorOptimizer] ========== --only parameter detected =========="),s(`[EvaluatorOptimizer] onlyIndex: ${u}`),s(`[EvaluatorOptimizer] onlyTestId: ${w}`),s(`[EvaluatorOptimizer] Original test plan length: ${Q.length} characters`),s(`[EvaluatorOptimizer] Original test plan content (first 200 chars):
${Q.substring(0,200)}...`);try{s("[EvaluatorOptimizer] Calling filterTestPlanCSV...");let g=await be(Q,u,w);s("[EvaluatorOptimizer] filterTestPlanCSV returned successfully"),s(`[EvaluatorOptimizer] Filtered test plan length: ${g.length} characters`),s(`[EvaluatorOptimizer] Filtered test plan content:
${g}`),g.trim()===""?s("[EvaluatorOptimizer] WARNING: Filtered test plan is empty! Using original plan."):(Q=g,s("[EvaluatorOptimizer] Successfully applied filtered test plan"))}catch(g){s(`[EvaluatorOptimizer] ERROR filtering test plan CSV: ${v(g)}`),s(`[EvaluatorOptimizer] Error stack: ${g instanceof Error?g.stack:"No stack trace"}`),s("[EvaluatorOptimizer] Continuing with original test plan due to filtering error")}s("[EvaluatorOptimizer] ========== End --only parameter processing ==========")}else s(`[EvaluatorOptimizer] No --only parameter detected (onlyIndex: ${u}, onlyTestId: ${w})`);let ct=ve(r),{sessions:S,runId:N}=await new M(this.args["api-url"]).asyncPrepWithStatePolling({app_uid:P,app_name:_,app_description:d,context:{timestamp:Date.now(),locale:Intl.DateTimeFormat().resolvedOptions().locale||"en_US"},initial_plan:Q,user_flows:ct,requirements:a,target_tests:JSON.stringify(f??[]),only:u||w?void 0:typeof m=="number"?m:void 0,start:p,ignore_indices:b,ignore_test_ids:h,thinking_budget:this.args["thinking-budget"]});if(Ke(S),s(`[EvaluatorOptimizer] Received ${S.length} QA sessions from /async_prep endpoint (after server-side filtering) for runId: ${N}`),S.length===0)throw c.end("sessions-preparation",{uid:e,result:"no-sessions-available"}),c.end("executeQAWorkflow",{uid:e,result:"no-sessions-available"}),new y({confidence:1,feedbacks:[{text:"No sessions available to run. This may be due to filtering parameters or no test plan available.",structured:{violation:"NO_SESSIONS_AVAILABLE",testId:"N/A",severity:"BLOCKING"},suggestions:[{type:"action",content:"Review your filtering parameters and ensure test plan is available.",severity:"HIGH"}]}],metadata:{filteredSessionCount:S.length,hasOnlyFilter:m!==void 0,hasStartFilter:p!==void 0,hasIgnoreFilters:(b?.length||0)+(h?.length||0)>0}});if(c.end("sessions-preparation",{uid:e,runId:N,sessionCount:S.length}),s(`[EvaluatorOptimizer] Prepared ${S.length} QA sessions:
${S.map(g=>g.session_uid).join(`
`)}`),W)s("[EvaluatorOptimizer] Skipping dashboard opening in test environment");else{c.start("launching-dashboard",{uid:e,runId:N,sessionCount:S.length});try{let g=await tt(S,R,P,this.args["api-url"]);if(g?.length){let T=S.filter(A=>g.includes(A.test_id));s(`[EvaluatorOptimizer] Manual filter applied: ${T.length}/${S.length} sessions selected`),S.splice(0,S.length,...T)}c.end("launching-dashboard",{uid:e,runId:N,sessionCount:S.length})}catch(g){c.end("launching-dashboard",{uid:e,runId:N,sessionCount:S.length,error:g.message}),s("[EvaluatorOptimizer] Failed to open realtime browser"),s(v(g))}}let Ae=this.args.parallel??Je();s(`[EvaluatorOptimizer] Executing ${Ae} parallel instances ${this.args.parallel?"(user-specified)":"(auto-calculated)"}`);let Ie=Qt(Ae),Y=S.map((g,T)=>{let A=new AbortController,L=new M(this.args["api-url"],A.signal);s(`[EvaluatorOptimizer] Created executor for session ${g.session_uid} (testId: ${g.test_id})`);let x={},xe=l(()=>{x.executorStartTime=Date.now(),x.testTimeoutMs=this.args["test-timeout"]*1e3,x.timeoutId=setTimeout(()=>{let k=Date.now()-x.executorStartTime;s(`[EvaluatorOptimizer ${g.session_uid}] Test timeout after ${k}ms (limit: ${x.testTimeoutMs}ms)`),_e.abort()},x.testTimeoutMs)},"setExecutorTimeout"),j=l(()=>{typeof x.timeoutId<"u"&&(clearTimeout(x.timeoutId),delete x.timeoutId)},"clearExecutorTimeout"),dt=l(()=>{s(`[EvaluatorOptimizer ${g.session_uid}] Resetting test timeout`),j(),xe()},"resetExecutorTimeout"),_e={session:g,execute:l(()=>Ie(async()=>{s(`[EvaluatorOptimizer] Starting task ${T+1}/${S.length}: ${g.session_uid} (testId: ${g.test_id})`),xe(),st(g.session_uid);try{let k=await this.#e(g,C,L,A,dt,r,N);return j(),k}catch(k){if(j(),await Te(g.session_uid,{decision:"CRITIQUE",feedbacks:[{structured:{error:k.message}}]}),k instanceof y)return{result:k.toEvaluationResult()};let De=Date.now()-x.executorStartTime;if(A.signal.aborted&&De>=x.testTimeoutMs)return{result:new y({confidence:1,feedbacks:[{text:`Test execution timed out after ${this.args["test-timeout"]} seconds. This is considered a stale test.`,structured:{violation:"STALE_TEST",severity:"HIGH",testId:g.test_id},suggestions:[{type:"action",content:"Review test complexity or increase timeout limit with --test-timeout parameter",severity:"HIGH"}]}],metadata:{staleTest:!0,executionTimeMs:De,timeoutLimitMs:x.testTimeoutMs}}).toEvaluationResult()};throw k}finally{j(),B.incrementCompletedTests()}}),"execute"),abort:l(()=>{j(),s(`[EvaluatorOptimizer ${g.session_uid}] Aborting session`),L.abort(g.session_uid).catch(k=>{s(`[EvaluatorOptimizer ${g.session_uid}] Failed to call abort API: ${k.message}`)}).finally(()=>{A.abort(),Pe(g.session_uid)})},"abort")};return _e});B.setTotalTests(Y.length),B.testsExecutionStarted(),c.start("tests-execution",{uid:e,runId:N,sessionCount:S.length});let X,Ce=Y.map(g=>{let T=g.session.session_uid,A=g.session.test_id;return g.execute().then(L=>(s(`[EvaluatorOptimizer ${T}] Test ${A} completed with decision: ${L.result.decision}, error: ${L.error??"None"}`),L)).catch(L=>{throw s(`[EvaluatorOptimizer ${T}] Test ${A} failed with error: ${v(L)}`),L})});I?X=await Ue(Ce,async(g,{result:T,error:A})=>!A&&T.decision==="PASS",async g=>{Ie.clearQueue(),g.forEach(T=>{Y[T].abort()})}):X=(await Promise.allSettled(Ce)).map((g,T)=>{switch(g.status){case"fulfilled":return g.value;case"rejected":{let A=y.fromError(g.reason,Y[T].session.test_id);return{result:A.toEvaluationResult(),error:A}}}}),c.end("tests-execution",{uid:e,runId:N,resultCount:X.length}),c.start("result-aggregation",{uid:e,runId:N});let de=He(X);return c.end("result-aggregation",{uid:e,runId:N,decision:de.decision}),c.end("executeQAWorkflow",{uid:e,result:de.decision}),de}catch(_){c.end("executeQAWorkflow",{uid:e,error:_.message}),s("[EvaluatorOptimizer] Error in QA workflow execution:"),s(v(_));let P=_?.message||"Unknown error";throw q(_,new y({confidence:.1,feedbacks:[{text:`QA automation failed: ${P}`,structured:{violation:`QA_WORKFLOW_FAILURE: ${P}`,testId:"N/A",severity:"BLOCKING"},suggestions:[{type:"action",content:"Check the project setup and ensure all dependencies are available.",severity:"HIGH"}]}]})),_}finally{await $?.stopWebapp()}}async#e(t,e,r,o,n,d,f){let a=t.session_uid,p=t.test_id;c.start("qa-session",{uid:a,testId:p});let m=new ie(t,e,!this.args["no-headless"]);try{await m.launchBrowser(),await new Promise(h=>setTimeout(h,2e3));let u=await m.getViewportBounds(),w=await m.takeScreenshot(u);await Se(Ee(t,0,w));let b=await this.#s(t,m,r,o,n,d,f);return c.end("qa-session",{uid:a,testId:p,decision:b.decision}),{result:b}}catch(u){if(o.signal.aborted)return c.end("qa-session",{uid:a,testId:p,result:"aborted"}),s(`[EvaluatorOptimizer ${a}] execution aborted`),await Pe(a),{result:new y({confidence:0,feedbacks:[{text:"QA session aborted",structured:{violation:"QA_AUTOMATION_ABORTED",testId:p}}],metadata:{aborted:!0}}).toEvaluationResult()};c.end("qa-session",{uid:a,testId:p,result:"error"}),s(`[EvaluatorOptimizer ${a}] execution error (testId: ${p})`),s(v(u));let w=u?.message||"Unknown error";throw q(u,new y({confidence:.1,feedbacks:[{text:`QA automation failed: ${w}`,structured:{violation:`QA_SESSION_FAILURE: ${w}`,testId:p,severity:"BLOCKING"},suggestions:[{type:"action",content:"Check the project setup and ensure all dependencies are available.",severity:"HIGH"}]}]})),u}finally{await m.cleanup()}}async#s(t,e,r,o,n,d,f){let a=t.session_uid,p=t.test_id;c.start("qa-loop",{uid:a,testId:p});let m=!0,u,w,b;for(;m;){if(o.signal.aborted)throw s(`[executeQALoop ${a}] Loop aborted by abort controller`),new Error("QA loop aborted");let h=u?.curr_step??0;try{c.start("qa-step",{uid:a,testId:p,step:`${h}`});let I=await e.extractDOM(),R=await e.getViewportBounds(),C=await e.getDevicePixelRatio();await e.freezePage();let $,_;try{let P=await e.takeScreenshot();try{Le(d,f,a,h,P)}catch{}_=await e.takeScreenshot(R);let Q={x0:R.x0*C,y0:R.y0*C,x1:R.x1*C,y1:R.y1*C};$=await r.step(t.session_uid,{dom:I,screenshot:P,viewportBounds:Q,...w&&{error:w},...b&&{last_action_uid:b}})}finally{await e.unfreezePage()}if(b?s(`[executeQALoop ${a}] Sending last_action_uid: ${b}`):s(`[executeQALoop ${a}] No last_action_uid to send (first request or no previous action_uid)`),w=void 0,b=$.action_uid,$.action_uid?s(`[executeQALoop ${a}] Received action_uid: ${$.action_uid}`):s(`[executeQALoop ${a}] No action_uid received`),s(`[executeQALoop ${a}] Received step response  ${JSON.stringify({action:$.action,currStep:h,action_uid:$.action_uid})}`),$.action==="FINISH"&&s(`[executeQALoop ${a}] FINISH response - Full stepResponse: ${JSON.stringify($,null,2)}`),$.session_status&&$.action!=="FINISH"&&(u=$.session_status,await Se(Ee(t,h,_))),m=await this.#r($,e,n),c.end("qa-step",{uid:a,testId:p,step:`${h}`,action:$.action,shouldContinue:m}),!m){let P=JSON.parse($.result);return c.end("qa-loop",{uid:a,testId:p,step:`${h}`,decision:P.decision}),s(`[executeQALoop ${a}] FINISH action - Parsed result: ${JSON.stringify(P,null,2)}`),await Te(a,{decision:P.decision,confidence:P.confidence,feedbacks:P.feedbacks,metadata:P.metadata}),P}}catch(I){let R=I.message;if(this.#t(R)){w=R,s(`[executeQALoop ${a}] Selector error at step ${h}, will propagate to next step: ${R}`),c.end("qa-step",{uid:a,testId:p,step:`${h}`,result:"selector-error-propagated"});continue}else c.end("qa-step",{uid:a,testId:p,step:`${h}`,result:"error"}),c.end("qa-loop",{uid:a,testId:p,step:`${h}`,result:"error"}),s(`[EvaluatorOptimizer ${a}] Error in QA loop, Task ${p}, Step ${h}`),s(v(I)),q(I,new y({confidence:.1,feedbacks:[{text:`QA automation failed at task ${p}, step ${h}:
${R}`,structured:{violation:`QA_STEP_FAILURE: ${R}`,testId:`${p}`,step:`${h}`}}],metadata:{failedStep:h}}))}}throw new Error("QA automation loop ended without FINISH action")}#t(t){return t.includes("Failed to focus on element with selector")||t.includes("Failed to click on element with selector")||t.includes("Cannot find element with selector")||t.includes("data-qa-id")}async#r(t,e,r){switch(t.action){case"RESET":return t.is_replay&&(s("[processQAAction] RESET with is_replay=true: Resetting test timeout"),r()),await e.resetPageState(),t.focus&&(s("[processQAAction] RESET: Focusing on element before actions"),await e.focusElement(t.focus)),t.native_click&&(s("[processQAAction] RESET: Clicking on element before actions"),await e.clickElement(t.native_click)),t.keystroke!==void 0&&(s("[processQAAction] RESET: Pressing key before script injection"),await e.pressKey(t.keystroke)),t.script&&await e.executeScript(t.script),!0;case"INJECT":return t.focus&&(s("[processQAAction] INJECT: Focusing on element before actions"),await e.focusElement(t.focus)),t.native_click&&(s("[processQAAction] INJECT: Clicking on element before actions"),await e.clickElement(t.native_click)),t.keystroke!==void 0&&(s("[processQAAction] INJECT: Pressing key before script injection"),await e.pressKey(t.keystroke)),t.script&&await e.executeScript(t.script),await new Promise(o=>setTimeout(o,500)),!0;case"FINISH":return s("[processQAAction] FINISH: QA automation completed"),!1;default:throw new Error(`Unknown QA action: ${t.action}`)}}async getTool(){return this.tool.get(this.args["api-url"])}};async function it(i,t){try{let e=rt(i);s(`Reading input file: ${e}`);let r=Vt(e,"utf-8"),o=JSON.parse(r);s("Input file parsed successfully");let n=new ce(t);s("Starting evaluation...");let d=await n.evaluate(o);if(t.output){let f=rt(t.output),a=JSON.stringify(d,null,2);Gt(f,a,"utf-8"),s(`Evaluation results saved to: ${f}`),console.log(`Results saved to: ${f}`)}else console.log(`
=== EVALUATION RESULT ===`),console.log(JSON.stringify(d,null,2));if(!t["keep-alive"]&&!W){let f=d.decision==="PASS"?0:1;await D.cleanup(),process.exit(f)}else s("Keeping process alive due to keepAlive option or test environment");return d}catch(e){if(console.error("Error:",e.message),e.code==="ENOENT"?console.error(`File not found: ${i}`):e instanceof SyntaxError&&console.error("Invalid JSON format in input file"),await D.cleanup(),W)throw e;process.exit(1)}}l(it,"handleEvaluate");function ot(i){try{let t=ke("evaluator-optimizer",i);console.log(`
=== CURSOR 1-CLICK INSTALL LINK ===`),console.log(t),console.log(`
=== USAGE ===`),console.log("1. Copy the link above"),console.log("2. Paste it into your browser or click it"),console.log("3. Cursor will prompt you to install the MCP server"),console.log("4. Once installed, the server will be available in Cursor"),console.log(i?`
Configured with API endpoint: ${i}`:`
No API endpoint configured - using local evaluation`)}catch(t){console.error("Error generating install link:",t.message),process.exit(1)}}l(ot,"handleInstallLink");import{randomUUID as jt}from"node:crypto";function Wt(i,t){let e=l((o,n,d)=>{let f=`<svg width="400" height="300" xmlns="http://www.w3.org/2000/svg">
            <rect width="400" height="300" fill="${o}"/>
            <rect x="10" y="10" width="380" height="40" fill="#fff" stroke="#ddd" rx="4"/>
            <text x="20" y="35" font-family="Arial" font-size="14" fill="#333">Mock Web Application</text>
            <rect x="10" y="60" width="380" height="200" fill="#f9f9f9" stroke="#ddd" rx="4"/>
            <text x="20" y="85" font-family="Arial" font-size="12" fill="#666">Test Status: ${n}</text>
            ${d.map((a,p)=>`<text x="20" y="${110+p*20}" font-family="Arial" font-size="11" fill="#333">${a}</text>`).join("")}
        </svg>`;return`data:image/svg+xml;base64,${Buffer.from(f).toString("base64")}`},"createMockupSVG"),r={running:[e("#e3f2fd","RUNNING - Login Form",["\u{1F504} Currently filling login form...","\u2713 Username field populated","\u23F3 Entering password...","\u26AA Submit button ready"]),e("#fff3e0","RUNNING - Navigation",["\u{1F504} Navigating to dashboard...","\u2713 Authentication successful","\u23F3 Loading user profile...","\u26AA Waiting for page elements"]),e("#f3e5f5","RUNNING - Form Interaction",["\u{1F504} Filling user preferences...","\u2713 Form validation passed","\u23F3 Updating settings...","\u26AA Confirmation pending"])],completed:[e("#e8f5e8","COMPLETED - Success",["\u2705 All test steps completed","\u2705 Login successful","\u2705 Navigation verified","\u2705 User data validated","\u2705 Logout confirmed"]),e("#e8f5e8","COMPLETED - Dashboard",["\u2705 Dashboard loaded successfully","\u2705 All widgets displayed","\u2705 User preferences applied","\u2705 Data refresh working","\u2705 Exit flow verified"]),e("#e8f5e8","COMPLETED - Feature Test",["\u2705 Feature functionality verified","\u2705 Edge cases handled","\u2705 Performance acceptable","\u2705 UI responsive","\u2705 Accessibility confirmed"])],failed:[e("#ffebee","FAILED - Timeout",["\u274C Test failed at step 3","\u2705 Login successful","\u2705 Navigation working","\u274C Element not found: .submit-btn","\u26AA Timeout after 10 seconds"]),e("#ffebee","FAILED - Assertion",["\u274C Test failed: Data mismatch","\u2705 Form submission successful","\u2705 Server response received","\u274C Expected 'John' but got 'Jane'","\u26AA Validation error detected"]),e("#ffebee","FAILED - Network",["\u274C Test failed: Network error","\u2705 Initial page loaded","\u2705 User interaction captured","\u274C API call failed (500 error)","\u26AA Retry limit exceeded"])]};return r[i][t%r[i].length]}l(Wt,"generateFakeScreenshot");function qt(i,t){let e=jt(),r=`TEST_${t.toUpperCase()}_${i+1}`,o=l(a=>[{action:"Navigate to login page",expectedResult:"Login page loads successfully",stepNumber:1},{action:"Enter username 'testuser'",expectedResult:"Username field populated",stepNumber:2},{action:"Enter password",expectedResult:"Password field populated",stepNumber:3},{action:"Click login button",expectedResult:"User successfully logged in",stepNumber:4},{action:"Navigate to dashboard",expectedResult:"Dashboard page loads",stepNumber:5},{action:"Verify user information",expectedResult:"User details displayed correctly",stepNumber:6},{action:"Click profile menu",expectedResult:"Profile dropdown opens",stepNumber:7},{action:"Select settings option",expectedResult:"Settings page opens",stepNumber:8},{action:"Update user preferences",expectedResult:"Preferences saved successfully",stepNumber:9},{action:"Logout from application",expectedResult:"User successfully logged out",stepNumber:10}].slice(0,a),"generateSteps"),d={pending:{name:`Pending Login Flow ${i+1}`,description:"Test user authentication and basic navigation flow - queued for execution",steps:o(5+i%3),currentStep:0},running:{name:`Running E2E Test ${i+1}`,description:"Currently executing end-to-end user workflow validation",steps:o(6+i%4),currentStep:2+i%3},completed:{name:`Completed Feature Test ${i+1}`,description:"Successfully validated feature functionality and user interactions",steps:o(4+i%3),currentStep:0},failed:{name:`Failed Integration Test ${i+1}`,description:`Integration test failed due to ${["timeout","element not found","assertion error","network issue"][i%4]}`,steps:o(7+i%2),currentStep:0},aborted:{name:`Aborted Stress Test ${i+1}`,description:`Performance test aborted due to ${["resource constraints","manual intervention","system overload"][i%3]}`,steps:o(3+i%4),currentStep:0}}[t],f={sessionUid:e,position:i+1,status:t,taskName:d.name,taskDescription:d.description,testId:r,currentStep:d.currentStep,totalSteps:d.steps.length,stepDescriptions:d.steps.map(a=>a.action),lastUpdate:Date.now()};return(t==="completed"||t==="failed")&&(f.result=Ht(t,i)),f}l(qt,"generateFakeDashboardSession");function Ht(i,t){let e={decision:i==="completed"?"PASS":"CRITIQUE",confidence:i==="completed"?.85+t%3*.05:.65+t%4*.08,feedbacks:[]};return i==="completed"?(e.feedbacks.push({text:`Test completed successfully. All ${3+t%3} validation steps passed.`,structured:void 0,suggestions:[]}),e.systemNotifications=[{type:"success",message:"All test assertions passed",priority:"medium",actionRequired:!1}]):(e.feedbacks.push({text:`Test failed during step ${2+t%3}. Critical validation error detected.`,structured:{violation:["Authentication failure","Element interaction timeout","Data validation error","Network connectivity issue"][t%4],testId:`TEST_FAILED_${t+1}`,step:`Step ${2+t%3}`,penalty:`$${(t+1)*10}`,severity:["CRITICAL","HIGH","MEDIUM"][t%3]},suggestions:[{type:"action",content:"Retry test with increased timeout values",description:"System may be under heavy load",severity:"MEDIUM"},{type:"code",content:"await page.waitForSelector('.target-element', { timeout: 10000 });",description:"Add explicit wait conditions",severity:"HIGH"}]}),e.systemNotifications=[{type:"error",message:"Critical test failure requires attention",priority:"high",actionRequired:!0}]),e.metadata={executionTime:`${15+t*3}.${t*7%10}s`,browserVersion:"Chrome 120.0.6099.71",testRunId:`run_${Date.now()}_${t}`,timestamp:new Date().toISOString()},e}l(Ht,"generateFakeEvaluationResult");async function Jt(i){try{s(`\u{1F680} Opening test dashboard with ${i.length} sessions`);let t=await import("path"),e=await import("fs"),o=l(m=>{let u=m;for(;u!==t.dirname(u);){let w=t.join(u,"package.json");if(e.existsSync(w))return u;u=t.dirname(u)}return process.cwd()},"findProjectRoot")(process.cwd()),n=t.join(o,"src/dashboard/index.html");if(!e.existsSync(n))throw new Error(`Dashboard HTML file not found at: ${n}`);let d=await import("puppeteer"),f=`file://${n}`,a=await d.default.launch({headless:!1,defaultViewport:null,protocolTimeout:0,args:["--no-sandbox","--disable-setuid-sandbox","--start-maximized","--disable-web-security","--disable-features=VizDisplayCompositor","--disable-background-timer-throttling","--disable-renderer-backgrounding","--disable-backgrounding-occluded-windows","--disable-infobars","--disable-session-crashed-bubble","--disable-translate","--no-first-run","--disable-default-apps"]}),p=await a.newPage();await p.goto(f),await p.waitForSelector("body",{timeout:5e3}).catch(()=>new Promise(m=>setTimeout(m,1e3))),await p.evaluate(m=>{window.dispatchEvent(new CustomEvent("dashboardInit",{detail:{sessions:m}}))},i),s(`\u2705 Test dashboard initialized with ${i.length} sessions`),s(`\u{1F4CA} Dashboard URL: ${f}`),a.on("disconnected",()=>{s("\u{1F534} Test dashboard browser disconnected")}),setTimeout(()=>{Kt(p,i)},1e3)}catch(t){throw s(`\u274C Failed to open test dashboard: ${t}`),t}}l(Jt,"openTestDashboard");async function nt(){try{s("\u{1F9EA} Generating fake dashboard data for testing...");let i=["pending","running","completed","failed","aborted"],t=[],e=0;for(let r of i)for(let o=0;o<10;o++){let n=qt(e,r);if(t.push(n),e++,r==="aborted")break}s(`\u{1F4CA} Generated ${t.length} fake dashboard sessions (10 per status: ${i.join(", ")})`),s("\u{1F680} Launching test dashboard with fake data..."),await Jt(t),setTimeout(()=>{Yt()},3e3)}catch(i){throw s(`\u274C Failed to launch test dashboard: ${i}`),i}}l(nt,"handleTestDashboard");async function Kt(i,t){try{s("\u{1F4F8} Sending screenshot updates via dashboardUpdate events...");for(let e of t)if(e.status==="running"||e.status==="completed"||e.status==="failed"){let r=Wt(e.status,e.position);await i.evaluate((o,n)=>{window.dispatchEvent(new CustomEvent("dashboardUpdate",{detail:{sessionUid:o,data:{},screenshot:n}}))},e.sessionUid,r),await new Promise(o=>setTimeout(o,50))}s(`\u2705 Screenshot updates sent for ${t.filter(e=>e.status==="running"||e.status==="completed"||e.status==="failed").length} sessions`)}catch(e){s(`\u274C Failed to send screenshot updates: ${e}`)}}l(Kt,"simulateScreenshotUpdates");async function Yt(){s("\u{1F504} Real-time updates simulation would start here (not implemented in this demo)"),s("\u{1F4A1} In a real scenario, running sessions would update their progress automatically"),s("\u{1F4C8} You can observe the different card states and data structures in the dashboard")}l(Yt,"simulateRealTimeUpdates");import Xt from"arg";var at=l(i=>{let t={"--start":{description:"Start with test number n (skip tests 1 to n-1). Must be \u2265 1.",context:["cli"],argDisplay:"--start n"},"--only":{description:"Run only test number n (if integer) or testId (if string). Cannot be used with --start or --ignore.",context:["cli"],argDisplay:"--only n|testId"},"--ignore":{description:"Ignore test with index n (if number) or testId (if string). Can be used multiple times.",context:["cli"],continuation:"Cannot be used with --only.",argDisplay:"--ignore n|id"},"--parallel":{description:"Set maximum parallel instances (default: auto-calculated). Must be \u2265 1.",context:["cli","server"],argDisplay:"--parallel n"},"--keep-alive":{description:"Keep process alive after evaluation (don't exit). Default: false.",context:["cli"],argDisplay:"--keep-alive"},"--fail-fast":{description:"Enable/disable fail-fast mode. Accepts: 'true', 'false', '1', '0'. Default: true.",context:["cli","server"],continuation:"When false, continues all tasks even if one fails.",argDisplay:"--fail-fast arg"},"--manual-filter":{description:"Show test selection UI in dashboard before running tests. Default: false.",context:["cli","server"],argDisplay:"--manual-filter"},"--test-timeout":{description:"Set test execution timeout in seconds. Default: 300 seconds (5 minutes).",context:["cli","server"],argDisplay:"--test-timeout n"},"--api-url":{description:'Override the API base URL. Default: "http://0.0.0.0:8000"',context:["cli","server"],argDisplay:"--api-url url"},"--output":{description:"Save evaluation results to JSON file instead of console output",context:["cli"],argDisplay:"--output filename.json"},"--help":{description:"Show this help message",context:["cli","server"],argDisplay:"--help"},"--no-headless":{description:"Show browser windows during QA automation (for debugging). Default: false.",context:["cli"],argDisplay:"--no-headless"},"--thinking-budget":{description:"Set thinking budget for evaluation processing. Accepts any integer (including 0 and -1).",context:["cli","server"],argDisplay:"--thinking-budget n"}},e=["\u2022 --start and --only cannot be used together","\u2022 --ignore cannot be used with --only","\u2022 All numeric parameters must be positive integers (\u2265 1)"];return{arguments:Object.entries(t).filter(([o,n])=>n.context.includes(i)).map(([o,n])=>({arg:o,argDisplay:n.argDisplay,description:n.description,continuation:n.continuation})),parameterRestrictions:i==="cli"?e:[]}},"getArgumentDescriptions"),lt=l(i=>{let t=Xt({"--start":Number,"--only":String,"--parallel":Number,"--test-timeout":Number,"--thinking-budget":Number,"--api-url":String,"--output":String,"--fail-fast":String,"--keep-alive":Boolean,"--help":Boolean,"--manual-filter":Boolean,"--no-headless":Boolean,"--ignore":[String]},{argv:i,permissive:!1}),e={_:t._,"api-url":"http://0.0.0.0:8000","fail-fast":!0,"keep-alive":!1,"manual-filter":!1,"no-headless":!1,"test-timeout":300};if(typeof t["--start"]<"u"){let r=t["--start"];if(isNaN(r)||r<1)throw new Error("--start parameter must be a positive number (1 or greater)");e.start=r,s(`Will start with test ${e.start} (skip tests 1-${e.start-1}) `)}if(typeof t["--only"]<"u"){let r=t["--only"];s("[parseCommandLineArgs] ========== Parsing --only parameter =========="),s(`[parseCommandLineArgs] Raw --only value: "${r}"`),s(`[parseCommandLineArgs] Type of --only value: ${typeof r}`);let o=parseInt(r,10);if(s(`[parseCommandLineArgs] Parsed numeric value: ${o}`),s(`[parseCommandLineArgs] Is numeric: ${!isNaN(o)}`),s(`[parseCommandLineArgs] Is positive: ${o>0}`),s(`[parseCommandLineArgs] String representation matches: ${o.toString()===r}`),!isNaN(o)&&o>0&&o.toString()===r)e.only=o,e.onlyIndex=o,s(`[parseCommandLineArgs] \u2705 Parsed --only as numeric index: ${e.only}`),s(`[parseCommandLineArgs] result.onlyIndex = ${e.onlyIndex}`);else if(r.trim().length>0)e.only=r,e.onlyTestId=r,s(`[parseCommandLineArgs] \u2705 Parsed --only as string testId: "${e.only}"`),s(`[parseCommandLineArgs] result.onlyTestId = "${e.onlyTestId}"`);else throw new Error("--only parameter must be a positive number (1 or greater) or a non-empty testId string");s("[parseCommandLineArgs] ========== End --only parameter parsing ==========")}else s("[parseCommandLineArgs] No --only parameter provided");if(typeof t["--parallel"]<"u"){let r=t["--parallel"];if(isNaN(r)||r<1)throw new Error("--parallel parameter must be a positive number (1 or greater)");e.parallel=r,s(`--parallel: Will run up to ${e.parallel} instances`)}if(typeof t["--test-timeout"]<"u"){let r=t["--test-timeout"];if(isNaN(r)||r<1)throw new Error("--test-timeout parameter must be a positive number (1 or greater)");e["test-timeout"]=r}if(s(`--test-timeout: Will use timeout of ${e["test-timeout"]} seconds`),t["--api-url"]&&(e["api-url"]=t["--api-url"]),s(`--api-url: Will use API base URL "${e["api-url"]}"`),t["--output"]&&(e.output=t["--output"],s(`--output: Will save results to JSON file "${e.output}"`)),typeof t["--keep-alive"]<"u"&&(e["keep-alive"]=t["--keep-alive"]),s(`--keep-alive: Will set keep alive to ${e["keep-alive"]}`),typeof t["--help"]<"u"&&(e.help=t["--help"]),typeof t["--manual-filter"]<"u"&&(e["manual-filter"]=t["--manual-filter"]),s(`--manual-filter: Manual filter mode: ${e["manual-filter"]?"enabled":"disabled"}`),typeof t["--no-headless"]<"u"&&(e["no-headless"]=t["--no-headless"]),s(`--no-headless: Browser visibility mode: ${e["no-headless"]?"enabled (browsers visible)":"disabled (headless)"}`),typeof t["--thinking-budget"]<"u"){let r=t["--thinking-budget"];if(isNaN(r))throw new Error("--thinking-budget parameter must be a valid number");e["thinking-budget"]=r,s(`--thinking-budget: Will use thinking budget of ${e["thinking-budget"]}`)}if(t["--ignore"]){let r=t["--ignore"],o=[],n=[];for(let d of r){let f=parseInt(d,10);!isNaN(f)&&f>0?o.push(f):n.push(d)}e.ignoreIndices=o,s(`Will ignore test indices: ${e.ignoreIndices.join(", ")}`),e.ignoreStrings=n,s(`Will ignore test IDs: ${e.ignoreStrings.join(", ")}`)}if(typeof t["--fail-fast"]<"u"){let r=t["--fail-fast"];if(r==="false"||r==="0")e["fail-fast"]=!1;else if(r==="true"||r==="1")e["fail-fast"]=!0;else throw new Error("Invalid value for --fail-fast: must be 'true', 'false', '1', or '0'")}if(s(`Fail-fast mode: ${e["fail-fast"]?"enabled":"disabled"}`),e.start!==void 0&&e.only!==void 0)throw new Error("--start and --only parameters cannot be used together");if(e.only!==void 0&&(e.ignoreIndices?.length||e.ignoreStrings?.length))throw new Error("--ignore parameters cannot be used with --only");return e},"parseCommandLineArgs");function Re(){let{arguments:i,parameterRestrictions:t}=at("cli");console.log(`
Usage: cli <command> [options]

Commands:
  evaluate <input-file.json> [options]    Evaluate using JSON input file
  install-link [--api-url url]            Generate Cursor 1-click install link
  test-dashboard                          Launch dashboard with fake test data
  help                                    Show this help message

Options:`),i.forEach(({argDisplay:e,description:r,continuation:o})=>{console.log(`  ${e.padEnd(18)} ${r}`),o&&console.log(`                     ${o}`)}),console.log(`
Parameter Restrictions:`),t.forEach(e=>{console.log(`  ${e}`)}),console.log(`

Note: This is the CLI tool. For MCP server configuration, see:
  npx mcp-evaluator-optimizer --help
`)}l(Re,"showHelp");async function Zt(){let i=process.argv.slice(2);i.length===0&&(Re(),process.exit(1));let t=lt(i),e=t._;switch(e[0]){case"evaluate":{let o=e[1];o||(console.error("Error: evaluate command requires an input file"),Re(),process.exit(1)),await it(o,t)}break;case"install-link":ot(t["api-url"]);break;case"test-dashboard":await nt();break;case"help":case"--help":case"-h":default:Re();break}}l(Zt,"main");Zt().catch(async i=>{console.error("Unexpected error:",i),await D.cleanup(),process.exit(1)});
