#!/usr/bin/env node
var yt=Object.defineProperty;var u=(i,e)=>yt(i,"name",{value:e,configurable:!0});import{readFileSync as os,writeFileSync as ns}from"fs";import{resolve as pt}from"path";var Be="1.0.0",se="QA Agent";import z from"fs";import vt from"os";import re from"path";var q=u(i=>(...e)=>{z.appendFileSync(i,`[${new Date().toISOString()}] ${Array.isArray(e)?e.join(" "):e}
`)},"logToFile"),s=q("/tmp/mcp-evaluator-debug.log"),Et=u((i,e)=>{let t=JSON.stringify(e),r=Buffer.from(t).toString("base64");return`cursor://anysphere.cursor-deeplink/mcp/install?name=${encodeURIComponent(i)}&config=${r}`},"generateCursorMCPDeeplink"),$t=u(i=>{let e=["-y","github:myBraavos/mcp-evaluator-optimizer#qa-agent"];return i&&e.push("--api-url",i),{command:"npx",args:e}},"generateMCPServerConfig"),Fe=u((i="evaluator-optimizer",e)=>{let t=$t(e);return Et(i,t)},"createCursorInstallLink");function ie(){switch(vt.platform()){case"darwin":return"macos";case"win32":case"cygwin":return"windows";case"linux":case"android":return"linux";case"aix":case"freebsd":case"openbsd":case"netbsd":case"sunos":case"haiku":default:return"unix"}}u(ie,"getOSName");function be(i){return typeof i=="string"?i:""}u(be,"safeString");function U(i,e){if(!i||typeof i!="string"||!e||typeof e!="string")return!1;try{return i.toLowerCase().includes(e.toLowerCase())}catch{return!1}}u(U,"safeIncludes");function St(){try{let i=be(process.argv?.[0]),e=be(process.execPath),t=be(process.env._);return{name:i.toLowerCase(),execPath:e.toLowerCase(),argv0:t.toLowerCase()}}catch{return{name:"",execPath:"",argv0:""}}}u(St,"getProcessInfo");function Me(){try{let i=process.env||{},e=St();if(i.VSCODE_PID||i.VSCODE_CWD||i.VSCODE_INJECTION||i.VSCODE_IPC_HOOK||i.VSCODE_IPC_HOOK_CLI)return U(e.name,"cursor")||U(e.execPath,"cursor")||U(e.argv0,"cursor")||i.CURSOR_USER_DATA_DIR||i.CURSOR_LOGS_DIR?"cursor":"vscode";if(i.TERM_PROGRAM&&typeof i.TERM_PROGRAM=="string")try{switch(i.TERM_PROGRAM.toLowerCase()){case"cursor":return"cursor";case"vscode":return"vscode";case"iterm.app":case"apple_terminal":case"hyper":case"wezterm":case"alacritty":return"terminal"}}catch{}if(i.VIMRUNTIME||i.VIM)return"vim";if(i.INSIDE_EMACS)return"emacs";if(["idea","webstorm","pycharm","phpstorm","intellij"].some(o=>U(e.name,o)||U(e.execPath,o)||U(e.argv0,o))||U(e.execPath,"jetbrains"))return"jetbrains";if(U(e.name,"sublime")||U(e.execPath,"sublime")||U(e.argv0,"sublime"))return"sublime";if(i.TERM&&typeof i.TERM=="string"){if(i.SSH_CLIENT||i.SSH_TTY||i.SSH_CONNECTION)return"terminal";try{let o=i.TERM.toLowerCase();if(o.includes("xterm")||o.includes("screen")||o.includes("tmux")||o==="linux"||o==="vt100"||o==="vt102")return"terminal"}catch{}}return"terminal"}catch{return"terminal"}}u(Me,"getCodingPlatform");var ze=u(async(i,e,t)=>{let r=new Array(i.length),o=new Set,n=!1,a=-1,m=u(async()=>{try{let l=i.map((c,p)=>p).filter(c=>!o.has(c));l.length>0&&await t(l)}catch(l){console.error("onAborted failed: ",l)}},"abortRemaining");return new Promise((l,c)=>{i.forEach((p,g)=>{p.then(async f=>{if(!n){o.add(g),r[g]=f;try{await e(g,f)?o.size===i.length&&l(r):(n=!0,a=g,await m(),l([r[a]]))}catch(h){await m(),c(h)}}}).catch(async f=>{n||(n=!0,o.add(g),await m(),c(f))})})})},"failFast"),J=process.env.JEST_WORKER_ID!==void 0||!1,v=u(i=>JSON.stringify({message:i.message,stack:i.stack}),"stringifyError"),oe=u((i,e,t="s")=>i>0&&i<=1?e:`${e}${t}`,"toPlural"),Tt=u((i,e)=>{let t=re.join(i,".debug"),r=re.join(t,"screenshots",e);return z.existsSync(t)||z.mkdirSync(t,{recursive:!0}),z.existsSync(r)||z.mkdirSync(r,{recursive:!0}),{debugRoot:t,screenshotsDir:r}},"createDebugFolder"),Ve=u((i,e,t,r,o)=>{let{screenshotsDir:n}=Tt(i,e),a=re.join(n,t);z.existsSync(a)||z.mkdirSync(a,{recursive:!0});let l=Date.now().toString().slice(-4),c=`step-${r}-${l}.base64`,p=re.join(a,c);try{return z.writeFileSync(p,o,"utf8"),s(`[DEBUG] Screenshot saved: ${p}`),p}catch(g){throw s(`[DEBUG] Failed to save screenshot: ${v(g)}`),g}},"saveScreenshot");import At from"puppeteer";import*as Qe from"readline";var ye=class{static{u(this,"BrowserRegistry")}browsers=new Map;cleanupInProgress=!1;registryId=0;handlingError=!1;cleanupTimeout=5e3;rlInterface;constructor(e=5e3){this.cleanupTimeout=e,this.setupProcessHandlers()}setupProcessHandlers(){let e=["SIGINT","SIGTERM","SIGQUIT","SIGABRT","SIGHUP"];for(let t of e)process.on(t,()=>{s(`[BrowserRegistry] Received ${t}, cleaning up browsers...`),this.safeCleanupAndExit(0,`${t} signal`)});process.platform==="win32"&&(this.rlInterface=Qe.createInterface({input:process.stdin,output:process.stdout}),this.rlInterface.on("SIGINT",()=>{s("[BrowserRegistry] Received SIGINT (Windows), cleaning up browsers..."),this.safeCleanupAndExit(0,"Windows SIGINT")})),process.on("uncaughtException",t=>{if(this.handlingError){console.error("[BrowserRegistry] Fatal: Error during error handling:",t),process.exit(1);return}this.handlingError=!0,s(`[BrowserRegistry] Uncaught exception: ${v(t)}`),this.safeCleanupAndExit(1,"uncaught exception")}),process.on("unhandledRejection",t=>{if(this.handlingError){console.error("[BrowserRegistry] Fatal: Unhandled rejection during error handling:",t),process.exit(1);return}this.handlingError=!0,s(`[BrowserRegistry] Unhandled promise rejection: ${v(t)}`),this.safeCleanupAndExit(1,"unhandled rejection")}),process.on("beforeExit",t=>{this.browsers.size>0&&!this.cleanupInProgress&&!this.handlingError&&(s(`[BrowserRegistry] beforeExit triggered with code ${t}, ${this.browsers.size} browsers still open`),this.safeCleanupAndExit(t,"beforeExit"))}),process.on("exit",t=>{if(s(`[BrowserRegistry] Process exiting with code ${t}`),this.browsers.size>0){s(`[BrowserRegistry] WARNING: ${this.browsers.size} browsers still registered at exit!`);let r=Array.from(this.browsers.values()).map(o=>`${o.id}: ${o.description}`).join(", ");s(`[BrowserRegistry] Open browsers: ${r}`)}this.rlInterface&&this.rlInterface.close()}),s(`[BrowserRegistry] Process handlers initialized (cleanup timeout: ${this.cleanupTimeout}ms)`)}async safeCleanupAndExit(e,t){if(this.cleanupInProgress){s(`[BrowserRegistry] Cleanup already in progress for ${t}, waiting...`);return}try{await this.cleanup(),s(`[BrowserRegistry] Cleanup complete for ${t}`)}catch(r){s(`[BrowserRegistry] Cleanup failed for ${t}: ${v(r)}`)}finally{process.exit(e)}}register(e,t){let r=`browser-${++this.registryId}`;return this.browsers.set(r,{id:r,browser:e,description:t,registeredAt:Date.now()}),s(`[BrowserRegistry] Registered browser ${r}: ${t} (total: ${this.browsers.size})`),r}unregister(e){let t=this.browsers.get(e);t&&(this.browsers.delete(e),s(`[BrowserRegistry] Unregistered browser ${e}: ${t.description} (total: ${this.browsers.size})`))}getCount(){return this.browsers.size}getRegisteredBrowsers(){let e=Date.now();return Array.from(this.browsers.values()).map(t=>({id:t.id,description:t.description,registeredAt:t.registeredAt,ageMs:e-t.registeredAt}))}async cleanup(){if(this.cleanupInProgress){s("[BrowserRegistry] Cleanup already in progress, skipping...");return}this.cleanupInProgress=!0;let e=this.browsers.size;if(e===0){s("[BrowserRegistry] No browsers to cleanup");return}s(`[BrowserRegistry] Starting cleanup of ${e} browsers...`);let t=Array.from(this.browsers.values()).map(async o=>{let n=Date.now();try{s(`[BrowserRegistry] Closing browser ${o.id}: ${o.description} (age: ${n-o.registeredAt}ms)`),await o.browser.close();let a=Date.now()-n;s(`[BrowserRegistry] Successfully closed browser ${o.id} in ${a}ms`)}catch(a){let m=Date.now()-n;s(`[BrowserRegistry] Error closing browser ${o.id} after ${m}ms: ${v(a)}`)}}),r=new Promise((o,n)=>setTimeout(()=>n(new Error(`Cleanup timeout after ${this.cleanupTimeout}ms`)),this.cleanupTimeout));try{await Promise.race([Promise.allSettled(t),r]),s(`[BrowserRegistry] Normal cleanup complete. All ${e} browsers have been processed.`)}catch{s("[BrowserRegistry] Cleanup timed out, initiating force kill..."),await this.forceKill()}finally{this.browsers.clear(),this.cleanupInProgress=!1}}async forceKill(){s(`[BrowserRegistry] Force killing ${this.browsers.size} browser processes...`);let e=Array.from(this.browsers.values()).map(async t=>{try{let r=t.browser.process();r&&!r.killed?(r.kill("SIGTERM"),await new Promise(o=>setTimeout(o,100)),r.killed?s(`[BrowserRegistry] Browser process ${t.id} terminated with SIGTERM`):(r.kill("SIGKILL"),s(`[BrowserRegistry] Force killed browser process ${t.id} with SIGKILL`))):s(`[BrowserRegistry] Browser process ${t.id} already dead`)}catch(r){s(`[BrowserRegistry] Error force killing browser ${t.id}: ${v(r)}`)}});await Promise.allSettled(e),this.browsers.clear(),s("[BrowserRegistry] Force kill complete")}getDiagnostics(){let e=Date.now();return{browserCount:this.browsers.size,cleanupInProgress:this.cleanupInProgress,handlingError:this.handlingError,browsers:Array.from(this.browsers.values()).map(t=>{let r=!1;try{let o=t.browser.process();r=o?!o.killed:!1}catch{r=!1}return{id:t.id,description:t.description,ageMs:e-t.registeredAt,processAlive:r}})}}},N=new ye(5e3);import He from"datadog-metrics";var G=q("/tmp/mcp-evaluator-profiling.log"),ve=class{static{u(this,"Profiler")}timers=new Map;datadogEnabled;constructor(){this.datadogEnabled=!!process.env.DATADOG_API_KEY,this.datadogEnabled&&(He.init({apiKey:process.env.DATADOG_API_KEY,prefix:"mcp_evaluator_optimizer.",defaultTags:["service:mcp-evaluator-optimizer","env:production"],onError:u(e=>G(`[PROFILING] DataDog error: ${e}`),"onError")}),G("[PROFILING] DataDog profiler initialized"))}createUniqueKey(e,t){if(!t||!t.uid)throw new Error(`[PROFILING] CRITICAL: UID is required for all profiler operations. Operation: ${e}`);return`${e}-${t.uid}`}start(e,t){let r=this.createUniqueKey(e,t),o=this.formatContext(t);this.timers.set(r,{start:Date.now(),context:t}),G(`[PROFILING] START ${e}${o}`)}end(e,t){let r=this.createUniqueKey(e,t),o=this.timers.get(r);if(!o){G(`[PROFILING] ERROR: No timer found for ${e}`);return}let n=Date.now()-o.start,a={...o.context,...t},m=this.formatContext(a);G(`[PROFILING] END ${e}${m} - Duration: ${n}ms`),this.sendToDataDog(e,n,a),this.timers.delete(r)}formatContext(e){let t=[];return e.runId&&t.push(`runId=${e.runId}`),Object.keys(e).forEach(r=>{["runId"].includes(r)||t.push(`${r}=${e[r]}`)}),t.length>0?` [${t.join(", ")}]`:""}sendToDataDog(e,t,r){if(this.datadogEnabled)try{let o=e.replace(/[^a-zA-Z0-9_]/g,"_"),n=[];He.histogram(o,t,n)}catch(o){G(`[PROFILING] Failed to send DataDog metric: ${o}`)}}},d=new ve;var ne=class{static{u(this,"PageFreezer")}page;client;freezeTimestamp=0;isPaused=!1;async initialize(e){return this.page=e,this.client=await e.createCDPSession(),await this.client.send("Debugger.enable"),this.client.on("Debugger.paused",()=>{this.isPaused=!0}),this.client.on("Debugger.resumed",()=>{this.isPaused=!1}),this}async freeze(){if(!this.client||!this.page)throw new Error("PageFreezer not initialized");if(!this.freezeTimestamp){this.freezeTimestamp=Date.now();let e=new Promise(t=>{if(this.isPaused){t();return}let r=u(()=>{this.client.off("Debugger.paused",r),t()},"listener");this.client.on("Debugger.paused",r)});this.client.send("Runtime.evaluate",{expression:`
                    (function() {
                        window.__freezeLoopActive = true;
                        while (window.__freezeLoopActive) {
                            // This loop will run until Debugger.pause stops it
                        }
                    })();
                `,awaitPromise:!1,userGesture:!0}).catch(()=>{}),await new Promise(t=>setTimeout(t,10)),await this.client.send("Debugger.pause"),await e,await this.client.send("Runtime.evaluate",{expression:"delete window.__freezeLoopActive;",awaitPromise:!1}).catch(()=>{}),await this.client.send("Animation.enable"),await this.client.send("Animation.setPlaybackRate",{playbackRate:0})}return this}async unfreeze(){if(!this.client)throw new Error("PageFreezer not initialized");if(this.freezeTimestamp){await this.client.send("Runtime.evaluate",{expression:"window.__freezeLoopActive = false;",awaitPromise:!1}).catch(()=>{});do try{await this.client.send("Debugger.resume"),await new Promise(e=>setTimeout(e,100))}catch(e){s(v(e))}while(this.isPaused);await this.client.send("Animation.setPlaybackRate",{playbackRate:1}),this.freezeTimestamp=0}return this}async cleanup(){this.client&&(await this.unfreeze(),await this.client.send("Debugger.disable"),await this.client.send("Animation.disable"),this.client=void 0,this.page=void 0)}};var Ee=!0,ae=class{static{u(this,"BrowserController")}session;webappUrl;headless;customViewport;browser;page;registryId;freezer;devicePixelRatio;constructor(e,t,r=!0,o){if(this.session=e,!t)throw new Error(`Invalid Webapp URL: "${t}"`);this.webappUrl=t,this.headless=r,this.customViewport=o}async launchBrowser(){if(s(`[BrowserController] Launching  Puppeteer browser for session ${this.session.session_uid}`),this.browser)throw new Error("Browser already launched");let e=this.session.session_uid,t=this.session.test_id;d.start("browser-launch",{uid:e,testId:t});let r;this.customViewport?(r={width:this.customViewport.width,height:this.customViewport.height,deviceScaleFactor:1},s(`[BrowserController] Using custom viewport: ${this.customViewport.width}x${this.customViewport.height}`)):(r=null,s("[BrowserController] Using system natural viewport")),this.browser=await At.launch({headless:this.headless,defaultViewport:r,args:["--disable-extensions","--disable-plugins","--disable-dev-shm-usage","--disable-gpu","--no-first-run","--disable-default-apps","--disable-background-timer-throttling","--disable-backgrounding-occluded-windows","--disable-renderer-backgrounding","--disable-blink-features=AutomationControlled","--disable-features=TranslateUI","--disable-ipc-flooding-protection","--disable-background-networking","--disable-hang-monitor","--disable-prompt-on-repost","--memory-pressure-off"]}),d.end("browser-launch",{uid:e,testId:t,result:"success"}),this.registryId=N.register(this.browser,`BrowserController-${this.session.session_uid}`),d.start("browser-new-page",{uid:e,testId:t}),this.page=await this.browser.newPage(),d.end("browser-new-page",{uid:e,testId:t,result:"success"}),this.#t(),this.freezer=Ee?await new ne().initialize(this.page):void 0,await this.navigateToWebapp(),await this.injectControllerScript(this.session.controller_script),s(`[BrowserController] Browser launched and controller script injected for session ${this.session.session_uid}`)}#e(){if(!this.page)throw new Error("Browser page not initialized")}#t(){if(!this.page){s("[BrowserController] Cannot setup console logging - page not initialized");return}let e=q("/tmp/mcp-evaluator-debug.log"),t=this.session.session_uid;this.page.on("console",async r=>{try{let o=r.type(),n=r.location(),a=r.text(),m=await Promise.all(r.args().map(async g=>{try{return await g.jsonValue()}catch{try{return await g.toString()}catch{return"[complex object]"}}})),l=`[BROWSER-${t}] ${o.toUpperCase()}: ${a}`,c=m.length>0?`[BROWSER-${t}] ARGS: ${JSON.stringify(m)}`:null,p=n.url?`[BROWSER-${t}] LOCATION: ${n.url}:${n.lineNumber}:${n.columnNumber}`:null;e(l),c&&e(c),p&&e(p)}catch(o){s(`[BrowserController] Failed to log browser console message: ${o}`)}}),this.page.on("pageerror",r=>{e(`[BROWSER-${t}] PAGE-ERROR: ${r.message}`),e(`[BROWSER-${t}] STACK: ${r.stack}`)}),this.page.on("requestfailed",r=>{e(`[BROWSER-${t}] REQUEST-FAILED: ${r.method()} ${r.url()}`),e(`[BROWSER-${t}] FAILURE: ${r.failure()?.errorText}`)}),s(`[BrowserController] Browser console logging enabled for session ${t}`)}async navigateToWebapp(){this.#e(),s(`[BrowserController] ${this.session.session_uid} navigating to webapp "${this.webappUrl}" `),d.start("browser-navigate-to-webapp",{uid:this.session.session_uid});try{await this.page.goto(this.webappUrl,{waitUntil:"domcontentloaded",timeout:6e4}),d.end("browser-navigate-to-webapp",{uid:this.session.session_uid})}catch(e){if(d.end("browser-navigate-to-webapp",{uid:this.session.session_uid,result:"error",error:e.message}),s(`[BrowserController] Navigation failed for ${this.webappUrl}: ${e.message}`),this.webappUrl.startsWith("file://")){s("[BrowserController] Retrying file URL navigation with networkidle0");try{await this.page.goto(this.webappUrl,{waitUntil:"networkidle0",timeout:9e4}),s("[BrowserController] File URL navigation succeeded on retry")}catch(t){throw s(`[BrowserController] File URL retry also failed: ${t.message}`),t}}else throw e}}async injectControllerScript(e){this.#e(),d.start("browser-inject-controller-script",{uid:this.session.session_uid}),await this.page.evaluateOnNewDocument(e),await this.page.evaluate(e),await this.page.evaluate(()=>typeof window.__puppeteerResize=="function")||await this.page.exposeFunction("__puppeteerResize",async o=>{await this.page.setViewport(o),await this.page.evaluate(n=>{window.__puppeteerBridge.dispatchEvent(new CustomEvent("viewport-changed",{detail:n}))},o)}),await this.page.evaluate(()=>typeof window.__puppeteerHover=="function")||await this.page.exposeFunction("__puppeteerHover",async(o,n)=>{try{return s(`[BrowserController] Bridge hover request: ${o} ${n?`at (${n.x}, ${n.y})`:""}`),n?(await this.page.mouse.move(n.x,n.y),await this.page.mouse.move(n.x,n.y)):await this.page.hover(o),await this.page.evaluate(a=>{window.__puppeteerBridge.dispatchEvent(new CustomEvent("hover-completed",{detail:{success:!0,selector:a.selector,coordinates:a.coordinates,timestamp:Date.now()}}))},{selector:o,coordinates:n}),!0}catch(a){let m=a instanceof Error?a.message:String(a);return s(`[BrowserController] Bridge hover failed: ${m}`),await this.page.evaluate(l=>{window.__puppeteerBridge.dispatchEvent(new CustomEvent("hover-failed",{detail:{success:!1,selector:l.selector,error:l.error,timestamp:Date.now()}}))},{selector:o,error:m}),!1}}),d.end("browser-inject-controller-script",{uid:this.session.session_uid})}async executeScript(e){this.#e(),d.start("browser-execute-script",{uid:this.session.session_uid});try{let t,r=new Promise((o,n)=>{t=setTimeout(()=>{n(new Error("Script execution timed out after 10 seconds"))},1e4)});try{await Promise.race([this.page.evaluate(e),r])}finally{clearTimeout(t)}d.end("browser-execute-script",{uid:this.session.session_uid})}catch(t){throw d.end("browser-execute-script",{uid:this.session.session_uid,result:t.message}),s(`[BrowserController ${this.session.session_uid}] script execution failed: ${t}`),t}}async focusElement(e){this.#e();let t=`[data-qa-id="${e}"]`;try{d.start("browser-focus-element",{uid:this.session.session_uid,elementId:e}),s(`[BrowserController ${this.session.session_uid}] focusing on element: ${t}`),await this.page.focus(t),d.end("browser-focus-element",{uid:this.session.session_uid,elementId:e,result:"success"}),s(`[BrowserController ${this.session.session_uid}] successfully focused on element: ${t}`)}catch(r){throw d.end("browser-focus-element",{uid:this.session.session_uid,elementId:e,result:r.message}),s(`[BrowserController ${this.session.session_uid}] failed to focus on element ${t}: ${r}`),new Error(`Failed to focus on element with selector "${t}": ${r}`)}}async clickElement(e){this.#e();let t=`[data-qa-id="${e}"]`;try{d.start("browser-click-element",{uid:this.session.session_uid,elementId:e}),s(`[BrowserController ${this.session.session_uid}] clicking on element: ${t}`),await this.page.click(t),d.end("browser-click-element",{uid:this.session.session_uid,elementId:e,result:"success"}),s(`[BrowserController ${this.session.session_uid}] successfully clicked on element: ${t}`)}catch(r){throw d.end("browser-click-element",{uid:this.session.session_uid,elementId:e,result:r.message}),s(`[BrowserController ${this.session.session_uid}] failed to click on element ${t}: ${r}`),new Error(`Failed to click on element with selector "${t}": ${r}`)}}async pressKey(e){this.#e();try{d.start("browser-press-key",{uid:this.session.session_uid,keyCode:e}),s(`[BrowserController] ${this.session.session_uid} pressing key with keyCode: ${e}`);let t;switch(e){case 8:t="Backspace";break;case 9:t="Tab";break;case 13:t="Enter";break;case 27:t="Escape";break;case 32:t="Space";break;case 37:t="ArrowLeft";break;case 38:t="ArrowUp";break;case 39:t="ArrowRight";break;case 40:t="ArrowDown";break;case 46:t="Delete";break;default:if(e>=32&&e<=126)t=String.fromCharCode(e);else throw new Error(`Unsupported keyCode: ${e}`)}await this.page.keyboard.press(t),d.end("browser-press-key",{uid:this.session.session_uid,keyCode:e,result:"success"}),s(`[BrowserController] ${this.session.session_uid} successfully pressed key: ${t} (keyCode: ${e})`)}catch(t){throw d.end("browser-press-key",{uid:this.session.session_uid,keyCode:e,result:t.message}),s(`[BrowserController] ${this.session.session_uid} failed to press key ${e}: ${t}`),new Error(`Failed to press key with keyCode "${e}": ${t}`)}}async takeScreenshot(e){this.#e(),d.start("browser-take-screenshot",{uid:this.session.session_uid});let t=await this.page.createCDPSession(),r=await this.getDevicePixelRatio(),{data:o}=await t.send("Page.captureScreenshot",{format:"png",...e?{clip:{x:e.x0,y:e.y0,width:e.x1-e.x0,height:e.y1-e.y0,scale:r}}:{captureBeyondViewport:!0}});return d.end("browser-take-screenshot",{uid:this.session.session_uid}),o}async extractDOM(){this.#e(),d.start("browser-extract-dom",{uid:this.session.session_uid});let e=await this.page.evaluate(async()=>{try{let t=await window.scrapeDOM();return console.log("[BrowserController] [dom.callback] returning to Node"),t}catch(t){return console.error(`[BrowserController] [dom.callback error]
`,t),{error:t}}});return d.end("browser-extract-dom",{uid:this.session.session_uid,result:e.error?e.error.message:"success"}),e}async getViewportBounds(){this.#e(),d.start("browser-get-viewport-bounds",{uid:this.session.session_uid});let e=await this.page.evaluate(()=>{let o=window.scrollX,n=window.scrollY;return{x0:o,y0:n,x1:o+window.innerWidth,y1:n+window.innerHeight}}),t=e.x1-e.x0,r=e.y1-e.y0;return s(`[BrowserController] Viewport bounds for ${this.session.session_uid}: ${t}x${r} (x0:${e.x0}, y0:${e.y0}, x1:${e.x1}, y1:${e.y1})`),d.end("browser-get-viewport-bounds",{uid:this.session.session_uid}),e}async getDevicePixelRatio(){if(this.#e(),this.devicePixelRatio)return this.devicePixelRatio;d.start("browser-get-device-pixel-ratio",{uid:this.session.session_uid});let e=await this.page.evaluate(()=>window.devicePixelRatio||1);return d.end("browser-get-device-pixel-ratio",{uid:this.session.session_uid}),this.devicePixelRatio=e,e}async getPage(){return this.#e(),this.page}async resetPageState(){this.#e(),s(`[BrowserController] resetPageState ${this.session.session_uid}`),await this.clearPageState(),await this.navigateToWebapp(),s(`[BrowserController] Re-injecting controller script after reset ${this.session.session_uid}`),this.session.controller_script&&await this.injectControllerScript(this.session.controller_script)}async freezePage(){if(Ee){if(!this.freezer)throw new Error("Page freezer not initialized");s(`[BrowserController] Freezing page for session ${this.session.session_uid}`),await this.freezer.freeze()}}async unfreezePage(){if(Ee){if(!this.freezer)throw new Error("Page freezer not initialized");s(`[BrowserController] Unfreezing page for session ${this.session.session_uid}`),await this.freezer.unfreeze()}}async clearPageState(){this.#e();try{d.start("browser-clear-page-state",{uid:this.session.session_uid}),s(`=== [BrowserController] clearPageState ${this.session.session_uid} ===`),await this.page.evaluate(()=>{typeof localStorage<"u"&&localStorage.clear()}),await this.page.evaluate(()=>{typeof sessionStorage<"u"&&sessionStorage.clear()});let e=await this.page.createCDPSession();await e.send("Network.clearBrowserCache"),await e.send("Network.clearBrowserCookies"),await this.page.evaluate(()=>{for(let t=1;t<1e4;t++)clearTimeout(t),clearInterval(t)}),d.end("browser-clear-page-state",{uid:this.session.session_uid,result:"success"})}catch(e){d.end("browser-clear-page-state",{uid:this.session.session_uid,result:e.message}),s(`[BrowserController] clearPageState error ${this.session.session_uid}: ${e}`)}}async cleanup(){s(`=== [BrowserController] cleanup ${this.session.session_uid} ===`);try{this.freezer&&(await this.freezer.cleanup(),this.freezer=void 0),this.browser&&(d.start("browser-cleanup",{uid:this.session.session_uid}),await this.browser.close(),this.browser=void 0,this.page=void 0,d.end("browser-cleanup",{uid:this.session.session_uid,result:"success"}))}catch(e){d.end("browser-cleanup",{uid:this.session.session_uid,result:e.message}),s(`[BrowserController] cleanup error ${this.session.session_uid}: ${e}`)}finally{this.registryId&&(N.unregister(this.registryId),this.registryId=void 0)}}};var y=class i extends Error{static{u(this,"CritiqueError")}#e;constructor(e){super(e.feedbacks?.[0]?.text||"Critique error"),this.name="CritiqueError",this.#e={...e,decision:"CRITIQUE",metadata:{...e.metadata,evaluationTime:Date.now(),evaluatorVersion:Be}}}toEvaluationResult(){return this.#e}static fromError(e,t){if(e instanceof i)return e;let r=String(e?.message||e||"Unknown Error");return new i({confidence:.1,feedbacks:[{text:`Error: ${r}`,structured:{violation:`EXECUTION_ERROR: ${r}`,testId:t,severity:"BLOCKING"}}]})}},K=u((i,e)=>{throw i instanceof y?i:e},"bubbleCritiqueErrorOrThrow"),$e=u(i=>i instanceof Error&&(i.name==="AbortError"||i.message.includes("timeout")),"isTimeoutError");var Se=class{static{u(this,"ProgressTracker")}state={progressToken:void 0,server:void 0,totalTests:0,completedTests:0};initialize(e){this.state.progressToken=e.progressToken,this.state.server=e.server,s(`[Progress] Initialized with token: ${e.progressToken}`)}setTotalTests(e){this.state.totalTests=e,s(`[Progress] Updated totalTests to: ${e}`)}notify(e,t,r){if(!this.state.progressToken||!this.state.server){s("[Progress] No token or server available, skipping notification");return}let o={progressToken:this.state.progressToken,progress:e,total:t,...r&&{message:r}};s(`[Progress] Notifying: ${e}/${t} - ${r||"no message"}`),this.state.server.notification({method:"notifications/progress",params:o}).catch(n=>{s(`[Progress] Failed to send notification: ${n}`)})}toolCalled(){this.notify(1,100,"Tool called")}toolValidated(){this.notify(2,100,"Tool validation completed")}evaluateStarted(){this.notify(3,100,"Evaluation started")}asyncPrepInitiated(){this.notify(4,100,"Async preparation initiated")}updateAsyncPreparationProgress(e,t){let r=Math.round(5+e/100*15),o=t||`Execution progress: ${e}%`;s(`[Progress] Execution progress ${e}% \u2192 ${r}%`),this.notify(r,100,o)}testsExecutionStarted(){this.notify(20,100,"Test execution started")}incrementCompletedTests(e){if(!this.state.totalTests){s("[Progress] Cannot increment completed tests - totalTests not set");return}this.state.completedTests++;let t=this.state.completedTests/this.state.totalTests,r=Math.round(Math.min(20+t*79,99));s(`[Progress] Test ${this.state.completedTests}/${this.state.totalTests} completed \u2192 ${r}% (testsProgress: ${t.toFixed(3)})`);let o=e||`Test ${this.state.completedTests}/${this.state.totalTests} completed`;this.notify(r,100,o)}complete(){this.notify(100,100,"Evaluation completed"),this.cleanup()}fail(e){this.notify(99,100,`Evaluation failed: ${e||"unknown error"}`)}completeAfterFailure(){this.notify(100,100,"Failed evaluation result returned"),this.cleanup()}cleanup(){this.state={progressToken:void 0,server:void 0,totalTests:0,completedTests:0}}},V=new Se;var Ge=3e4,Pt=2e3,xt=3,Q=class i{static{u(this,"ApiClient")}#e;#t;static apiCalls={initialize:0,async_prep:0,execution_state:0,step:0};constructor(e,t){this.#e=e,this.#t=t}get baseUrl(){return this.#e}async#s(e,t,r){let{timeoutMs:o=Ge,context:n}=r,a=this.#t??t.signal;if(o){let c=AbortSignal.timeout(o);a=a?AbortSignal.any([a,c]):c}let m=await fetch(e,{...t,signal:a});if(this.#t?.aborted)throw new Error(`API call aborted: ${n}`);if(!m.ok)throw new Error(`${n} failed: ${m.status}`);let l=await m.json();if(!l)throw new Error(`API call failed, json() returned undefined: ${n}`);return l}async#r(e,t,r){let{maxRetries:o=xt,baseDelay:n=Pt,timeoutMs:a=Ge,context:m}=r,l,c=0;for(let p=0;p<=o;p++)try{return await this.#s(e,t,{timeoutMs:a,context:m})}catch(g){if(l=g,$e(g)&&(c++,this.#t?.aborted))throw g;let f=g.message?.match(/failed: (\d+)/i);if(f){let b=parseInt(f[1]);if(![408,429,500,502,503,504].includes(b))throw g}if(p===o)throw s(`[ApiClient] ${m} failed after ${o+1} attempts. Last error: ${l.message}`),c===o+1?new Error(`Server not responding. Request timed out after ${a/1e3} seconds and was retried ${o} times. Test aborted. `):l;let h=n*Math.pow(2,p);s(`[ApiClient] ${m} attempt ${p+1} failed: ${l.message}. Retrying in ${h}ms...`),await new Promise(b=>setTimeout(b,h))}throw l}async asyncPrep(e){let t=`api-async-prep-${++i.apiCalls.async_prep}-${Date.now()}`;d.start("api-async-prep",{uid:t});let r=await this.#s(`${this.baseUrl}/mgr/api/v1/test-plans/async_prep`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)},{context:"Async QA sessions preparation",timeoutMs:6e4});return d.end("api-async-prep",{uid:t,runId:r.execution_id}),r}async getExecutionState(e){let t=`api-get-execution-state-${++i.apiCalls.execution_state}-${Date.now()}`,r=`${this.baseUrl}/mgr/api/v1/executions/${e}/state`;s(`[ApiClient.getExecutionState] ${t} - Fetching state for runId: ${e}`),s(`[ApiClient.getExecutionState] ${t} - Request URL: ${r}`),d.start("api-get-execution-state",{uid:t,runId:e});let o=await this.#s(r,{method:"GET",headers:{"Content-Type":"application/json"}},{context:"Get execution state",timeoutMs:5e3});return s(`[ApiClient.getExecutionState] ${t} - Full /state response:`),s(`[ApiClient.getExecutionState] ${t} - Response status: ${o.status}`),s(`[ApiClient.getExecutionState] ${t} - Full response body: ${JSON.stringify(o,null,2)}`),d.end("api-get-execution-state",{uid:t,runId:e,status:o.status}),o}async asyncPrepWithStatePolling(e){let t=`api-async-prep-with-polling-${Date.now()}`;d.start("api-async-prep-with-polling",{uid:t});let{execution_id:r}=await this.asyncPrep(e);s(`[ApiClient] Started async prep with runId: ${r}`),V.asyncPrepInitiated();let o=Date.now(),n=10*60*1e3,a=3e3;for(;;){if(Date.now()-o>=n)throw new Error(`Preparing timeout: Test plan preparation exceeded ${n/(60*1e3)} minutes `);try{let l=await this.getExecutionState(r);switch(s(`[ApiClient] Poll ${r}: ${l.status} - ${l.message} (${l.progress_percentage}%)`),V.updateAsyncPreparationProgress(l.progress_percentage,`${l.message} (created ${l.completed_sessions} sessions)`),l.status){case"running":case"completed":{if(!l.sessions)throw s(`[ApiClient] ERROR: Status '${l.status}' but no sessions in state response`),new Error(`'${l.status}' but no sessions`);return s(`[ApiClient] Sessions data received: ${l.sessions.length} sessions`),s(`[ApiClient] Full sessions data: ${JSON.stringify(l.sessions,null,2)}`),{sessions:l.sessions,runId:r}}case"failed":throw new y({confidence:1,feedbacks:[{text:`UNACCEPTABLE: Failed to prepare test plan - ${l.message}. The .vibe/test_plan content appears to be invalid or insufficient.`,structured:{violation:"QA_PLAN_PREPARATION_FAILED",testId:"N/A",severity:"BLOCKING",penalty:"$2000"},suggestions:[{type:"action",content:`Review and fix the .vibe/test_plan file content. Error: ${l.message}`,severity:"BLOCKING"}]}]});case"preparing":break;default:throw new Error(`Unknown execution status: ${l.status}`)}}catch(l){if(l instanceof y)throw l;$e(l)?s(`[ApiClient] Poll timeout for ${r}, retrying...`):s(`[ApiClient] Poll error for ${r}: ${v(l)}
retrying...`)}finally{d.end("api-async-prep-with-polling",{uid:t,runId:r})}await new Promise(l=>setTimeout(l,a))}}async step(e,t){let r=`api-step-${++i.apiCalls.step}-${Date.now()}`;d.start("api-step",{uid:r,sessionId:e});let o=await this.#r(`${this.baseUrl}/${e}/step`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)},{context:`[${e}] QA step`});return d.end("api-step",{uid:r,sessionId:e,action:o.action}),o}async abort(e){await this.#s(`${this.baseUrl}/${e}/abort`,{method:"POST",headers:{"Content-Type":"application/json"}},{context:`[${e}] Session abort`})}async initializeTool(e){let t=`api-init-tool-${++i.apiCalls.initialize}-${Date.now()}`;d.start("api-init-tool",{uid:t});let r=await this.#s(`${this.baseUrl}/init_tool`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)},{context:"Tool initialization"});return d.end("api-init-tool",{uid:t,result:"success"}),r}};var le=class{static{u(this,"EvaluatorTool")}tool=null;initPromise=null;async get(e){return this.tool?this.tool:this.initPromise?this.initPromise:(s("=== [EvaluatorTool] Fetching tool info ==="),this.initPromise=this.#e(e),this.initPromise)}async#e(e){try{let t=await new Q(e).initializeTool({os:ie(),coding_platform:Me(),coding_agent:"claude-4-sonnet"}),r={name:t.name,description:t.description,inputSchema:JSON.parse(t.schema)};return this.tool=r,s("=== [EvaluatorTool] Tool info fetched successfully ==="),s(`Tool name: ${r.name}`),s(`Tool description: ${r.description}`),s(`Tool inputSchema: ${JSON.stringify(r.inputSchema,void 0,2)}`),r}catch(t){throw s("[EvaluatorTool] Error fetching tool definition:"),s(v(t)),this.initPromise=null,t}}};import{spawn as Ct}from"child_process";var je=u(i=>{let e=[/url:\s*(https?:\/\/[^\s]+)/i,/Local:\s*(https?:\/\/[^\s]+)/i,/Local:\s*(https?:\/\/localhost:\d+)/i,/(?:server.*?(?:running|started).*?(?:on|at)|listening.*?(?:on|at)).*?(https?:\/\/[^\s]+)/i,/(https?:\/\/localhost:\d+)/i,/(?:port|listening.*?on).*?(\d+)/i];for(let t of e){let r=i.match(t);if(r){let o=r[1];if(/^\d+$/.test(o)&&(o=`http://localhost:${o}`),o.startsWith("http://")||o.startsWith("https://"))return o}}return null},"extractUrlFromOutput");var Y=class{static{u(this,"WebappController")}#e;startWebapp=u(async(e,t)=>{let r=`webapp-start-${Date.now()}`;return d.start("webapp-start",{uid:r,command:t}),new Promise((o,n)=>{s(`[WebappController] Starting webapp with command "${t}" in ${e}`);try{let a,m;if(t.startsWith("node -e")){let h=t.match(/^node -e\s+(.+)$/);if(h){let b=h[1],E=b.startsWith('"')&&b.endsWith('"')?b.slice(1,-1):b;a="node",m=["-e",E]}else throw d.end("webapp-start",{uid:r,result:"error",error:"Invalid node -e command"}),new Error(`Invalid node -e command: ${t}`)}else[a,...m]=t.split(" ");d.start("webapp-process-spawn",{uid:r,command:a});let l=Ct(a,m,{cwd:e,stdio:["pipe","pipe","pipe"]});d.end("webapp-process-spawn",{uid:r,command:a,result:"success",pid:l.pid});let c=null,p={};d.start("webapp-url-detection",{uid:r});let g=u((h,b={})=>{p.current&&(clearTimeout(p.current),p.current=null);let E=typeof h=="string"?h:h.message,$=typeof h=="string"?new Error(h):h;d.end("webapp-url-detection",{uid:r,result:"error",...b}),d.end("webapp-start",{uid:r,result:"error",error:E,...b}),n($)},"handleError"),f=u(h=>{let b=je(h);b&&!c&&(c=b,s(`[WebappController] Detected webapp URL "${b}"`),this.#e={process:l,url:b},p.current&&(clearTimeout(p.current),p.current=null),d.end("webapp-url-detection",{uid:r,result:"success",detectedUrl:b}),d.end("webapp-start",{uid:r,result:"success",url:b}),o(this.#e))},"detectUrl");l.stdout?.on("data",h=>{let b=h.toString();s(`[WebappController] stdout: ${b}`),f(b)}),l.stderr?.on("data",h=>{let b=h.toString();s(`[WebappController] stderr: ${b}`),f(b)}),l.on("error",h=>{s("[WebappController] Error starting webapp process"),s(v(h)),g(h,{source:"process-error"})}),l.on("close",(h,b)=>{s(`Webapp process closed with code ${h} and signal ${b}`),h!==0&&!c&&g(`Webapp process exited with code ${h}`,{exitCode:h,signal:b})}),p.current=setTimeout(()=>{c||(p.current=null,g("Timeout: No webapp URL detected within 30 seconds",{source:"timeout"}))},3e4)}catch(a){d.end("webapp-start",{uid:r,result:"error",error:a.message}),n(a)}})},"startWebapp");stopWebapp=u(()=>new Promise(e=>{if(this.#e&&!this.#e.process.killed){let t=`webapp-stop-${Date.now()}`;d.start("webapp-stop",{uid:t}),s("[WebappController] Stopping webapp process");let r=this.#e.process,o=!1,n=u(()=>{o||(o=!0,d.end("webapp-stop",{uid:t,result:"success",pid:r.pid}),this.#e=void 0,global.gc&&global.gc(),e())},"cleanup");r.once("exit",n),r.kill("SIGTERM"),setTimeout(()=>{!r.killed&&!o&&(s("[WebappController] Process didn't exit gracefully, sending SIGKILL"),r.kill("SIGKILL"))},1e3),setTimeout(()=>{o||(s("[WebappController] Force resolving after timeout"),n())},3e3)}else this.#e=void 0,e()}),"stopWebapp");get webapp(){return this.#e}};import We from"fs";var ce=u(async i=>{let e=`webapp-validation-${Date.now()}`;if(i.startsWith("file:///")){d.start("webapp-file-validation",{uid:e,url:i});let t=i.replace("file://",""),{access:r}=We.promises;await r(t,We.constants.F_OK),d.end("webapp-file-validation",{uid:e,result:"success",filePath:t}),s(`[validateWebappUrl] Confirmed file exists at ${i}`)}else{d.start("webapp-http-validation",{uid:e,url:i});let t=new AbortController,r=setTimeout(()=>t.abort(),2e3),o=await fetch(i,{method:"HEAD",signal:t.signal});if(clearTimeout(r),!o.ok){let n=new Error(`Server responded with status ${o.status}`);throw d.end("webapp-http-validation",{uid:e,result:"error",httpStatus:o.status,error:n.message}),n}s(`[validateWebappUrl] Confirmed server is running at ${i}`),d.end("webapp-http-validation",{uid:e,result:"success",httpStatus:o.status})}},"validateWebappUrl");import Ke from"path";import X from"fs";import{randomUUID as Ot}from"node:crypto";import{cpus as Ut,freemem as Lt,totalmem as Bt}from"node:os";import{execSync as Ft}from"node:child_process";import _t from"path";import Dt from"fs";import{parse as Rt}from"csv-parse";var ue=u(async i=>new Promise(e=>{let t=0,r=!1,o=Rt({delimiter:"|",skip_empty_lines:!0,trim:!0});o.on("readable",function(){let n;for(;n=o.read();)t++,!(typeof n[0]=="string"&&n[0].startsWith("#"))&&n.length>3&&(r=!0)}),o.on("error",function(n){e({isValid:!1,error:n.message})}),o.on("end",function(){e({isValid:t>0&&r,error:r?void 0:"CSV must have rows with more than 3 columns"})}),o.write(i),o.end()}),"validateCSVFormat");import{parse as It}from"csv-parse";var Te=u(async(i,e,t)=>(s("[filterTestPlanCSV] Starting CSV filtering..."),s(`[filterTestPlanCSV] testIndex: ${e}, testId: ${t}`),s(`[filterTestPlanCSV] CSV content length: ${i.length}`),new Promise((r,o)=>{let n=[],a,m=0,l=0,c=!1,p;s("[filterTestPlanCSV] Initializing CSV parser...");let g=It({delimiter:"|",skip_empty_lines:!0,trim:!0});g.on("readable",function(){let f;for(;f=g.read();){if(s(`[filterTestPlanCSV] Parsing row: ${JSON.stringify(f)}`),typeof f[0]=="string"&&f[0].startsWith("#")){s(`[filterTestPlanCSV] Found header row: ${JSON.stringify(f)}`),a=f;continue}if(m++,l++,s(`[filterTestPlanCSV] Processing data row ${m}: ${JSON.stringify(f)}`),e&&m===e)s(`[filterTestPlanCSV] Found target row by index ${e}: ${JSON.stringify(f)}`),p=f,c=!0;else if(t&&f.length>0){let h=f[0]?.trim();s(`[filterTestPlanCSV] Checking testId: "${h}" vs target "${t}"`),h===t&&(s(`[filterTestPlanCSV] Found target row by testId "${t}": ${JSON.stringify(f)}`),p=f,c=!0)}}}),g.on("error",function(f){s(`[filterTestPlanCSV] Error parsing CSV: ${f.message}`),o(f)}),g.on("end",function(){if(s("[filterTestPlanCSV] ========== CSV parser 'end' event triggered =========="),s(`[filterTestPlanCSV] foundTest: ${c}`),s(`[filterTestPlanCSV] targetRow exists: ${!!p}`),s(`[filterTestPlanCSV] headerRow exists: ${!!a}`),!c||!p){e?s(`[filterTestPlanCSV] Test index ${e} not found in ${l} total tests`):t&&s(`[filterTestPlanCSV] Test ID "${t}" not found in ${l} total tests`),s("[filterTestPlanCSV] Returning failure result with original CSV"),r({filteredCSV:i,found:!1,originalTestCount:l,filteredTestCount:0});return}let f=[];a&&(f.push(a.join("|")),s(`[filterTestPlanCSV] Added header row: ${a.join("|")}`)),p&&(f.push(p.join("|")),s(`[filterTestPlanCSV] Added target row: ${p.join("|")}`));let h=f.join(`
`);e?s(`[filterTestPlanCSV] \u2705 Successfully filtered CSV to test index ${e}`):t&&s(`[filterTestPlanCSV] \u2705 Successfully filtered CSV to test ID "${t}"`),s(`[filterTestPlanCSV] Filtered CSV content (length: ${h.length}):
${h}`),s("[filterTestPlanCSV] ========== Resolving promise with success result =========="),r({filteredCSV:h,found:!0,originalTestCount:l,filteredTestCount:1})}),s(`[filterTestPlanCSV] Writing CSV content to parser (${i.length} characters)...`),g.write(i),s("[filterTestPlanCSV] Calling parser.end()..."),g.end()})),"filterTestPlanCSV");var Ae=u(i=>{let e=_t.join(i,".vibe","test_plan");return Dt.readFileSync(e,"utf8")},"readTestPlanRaw"),qe=u(async i=>{try{let e=Ae(i);if(!(await ue(e)).isValid)return s("[assertTestPlanFile] Returning CRITIQUE - Invalid or empty test plan file"),new y({confidence:1,feedbacks:[{text:"UNACCEPTABLE: Empty or invalid test plan in .vibe/test_plan file. FORBIDDEN to continue without a detailed test plan for the entire project.",structured:{violation:"MANDATORY_QA_PLAN",testId:"N/A",severity:"BLOCKING",penalty:"$2000"},suggestions:[{type:"action",content:"RULE 1: Create comprehensive QA test plan in CSV format in .vibe/test_plan file covering the entire project. NO SHORTCUTS.",severity:"BLOCKING"}]}]});s("[assertTestPlanFile] Test plan file validated successfully");return}catch(e){let t=e.message.toLowerCase();return t.includes("enoent")||t.includes("no such file")?(s("[assertTestPlanFile] Returning CRITIQUE - Missing .vibe/test_plan file"),new y({confidence:1,feedbacks:[{text:"UNACCEPTABLE: Missing .vibe/test_plan file. FORBIDDEN to continue without a detailed test plan for the entire project.",structured:{violation:"MANDATORY_QA_PLAN",testId:"N/A",severity:"BLOCKING",penalty:"$2000"},suggestions:[{type:"action",content:"RULE 1: Create comprehensive QA test plan in .vibe/test_plan file covering the entire project. Step-by-step instructions. NO SHORTCUTS.",severity:"BLOCKING"}]}]})):(s("[assertTestPlanFile] Returning CRITIQUE - Error reading .vibe/test_plan file"),new y({confidence:1,feedbacks:[{text:`UNACCEPTABLE: Error reading .vibe/test_plan file: ${t}! FORBIDDEN to continue without accessible test plan.`,structured:{violation:"QA_PLAN_ACCESS_ERROR",testId:"N/A",severity:"BLOCKING",penalty:"$2000"},suggestions:[{type:"action",content:`Ensure .vibe/test_plan file exists and is readable. Error: ${t}`,severity:"BLOCKING"}]}]}))}},"assertTestPlanFile");import Nt from"path";import kt from"fs";var Pe=u(i=>{let e=Nt.join(i,".vibe","user_flows");try{return kt.readFileSync(e,"utf8")}catch(t){let r=t.message.toLowerCase();if(r.includes("enoent")||r.includes("no such file"))return s("[readUserFlowsRaw] User flows file not found, returning empty content"),"";throw t}},"readUserFlowsRaw"),Je=u(async i=>{try{let e=Pe(i);if(!e.trim()){s("[assertUserFlowsFile] User flows file not found or empty, continuing without user flows");return}if(!(await ue(e)).isValid)return s("[assertUserFlowsFile] Returning CRITIQUE - Invalid user flows file format"),new y({confidence:1,feedbacks:[{text:"Invalid user flows format in .vibe/user_flows file. Please provide valid CSV format or remove the file to proceed without user flows.",structured:{violation:"INVALID_USER_FLOWS_FORMAT",testId:"N/A",severity:"BLOCKING",penalty:"$500"},suggestions:[{type:"action",content:"Fix the CSV format in .vibe/user_flows file or remove the file to proceed without user flows documentation.",severity:"HIGH"}]}]});s("[assertUserFlowsFile] User flows file validated successfully");return}catch(e){let t=e.message.toLowerCase();if(t.includes("enoent")||t.includes("no such file")){s("[assertUserFlowsFile] User flows file not found, continuing without user flows");return}return s("[assertUserFlowsFile] Returning CRITIQUE - Error reading .vibe/user_flows file"),new y({confidence:1,feedbacks:[{text:`Error reading .vibe/user_flows file: ${t}. Please fix the file permissions or remove the file to proceed without user flows.`,structured:{violation:"USER_FLOWS_ACCESS_ERROR",testId:"N/A",severity:"BLOCKING",penalty:"$500"},suggestions:[{type:"action",content:`Fix file permissions for .vibe/user_flows or remove the file to proceed without user flows. Error: ${t}`,severity:"HIGH"}]}]})}},"assertUserFlowsFile");var Mt=u(i=>/^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(i.trim()),"isValidUUID"),Ye=u(i=>{let e=Ke.join(i,".vibe"),t=Ke.join(e,"uid");X.existsSync(e)||X.mkdirSync(e,{recursive:!0});let r;try{if(X.existsSync(t)){let o=X.readFileSync(t,"utf8").trim();if(Mt(o))return o;s(`[readAppUID] Invalid UUID found in ${t}, replacing with new one`)}return r=Ot(),X.writeFileSync(t,r,"utf8"),s(`[readAppUID] Generated new app UID: ${r}`),r}catch(o){throw s("[readAppUID] Error reading UID:"),s(v(o)),o}},"readAppUID"),Xe=u(async i=>zt(i.projectFolderPath)??Vt(i)??await Qt(i)??await qe(i.projectFolderPath)??await Je(i.projectFolderPath)??await Ht(i),"assertEvaluationRequest"),zt=u(i=>{if(!i)return s("[assertEvaluationRequest] Returning CRITIQUE - Missing project folder path"),new y({confidence:1,feedbacks:[{text:"UNACCEPTABLE: Missing projectFolderPath. FORBIDDEN to proceed without project path.",structured:{violation:"MANDATORY_PROJECT_PATH",testId:"N/A",severity:"BLOCKING",penalty:"$1000"},suggestions:[{type:"action",content:`RULE 1: Provide the absolute path to the project folder (e.g., '/path/to/project').
                                NO EXCEPTIONS.`,severity:"HIGH"}]}]})},"assertProjectFolderPath"),Vt=u(i=>{let{projectRunCommand:e,projectRunUrl:t}=i;if(!t&&!e)return s("[assertEvaluationRequest] Returning CRITIQUE - Missing project run command"),new y({confidence:1,feedbacks:[{text:"UNACCEPTABLE: Missing projectRunCommand. FORBIDDEN to proceed without run command or running server address.",structured:{violation:"MANDATORY_PROJECT_RUN_COMMAND",testId:"N/A",severity:"BLOCKING",penalty:"$1000"},suggestions:[{type:"action",content:`RULE 2: Either provide the run command to start the project locally (e.g., 'yarn dev' or 'npm start') OR provide the projectRunUrl of an already running server.
                            NO EXCEPTIONS.`,severity:"HIGH"}]}]})},"assertProjectRunCommand"),Qt=u(async i=>{let{projectRunUrl:e}=i;if(e){if(!/^(https?|file):\/\/\S*$/.test(e))return s("[assertEvaluationRequest] Returning CRITIQUE - Invalid project run address format"),new y({confidence:1,feedbacks:[{text:`UNACCEPTABLE: Invalid projectRunUrl format '${e}'. Must be a valid HTTP/HTTPS/FILE URL.`,structured:{violation:"INVALID_PROJECT_RUN_ADDRESS",testId:"N/A",severity:"BLOCKING",penalty:"$500"},suggestions:[{type:"action",content:"Provide a valid URL format for projectRunUrl (e.g., 'http://localhost:3000', 'https://localhost:8080', 'file:///path/to/file.html').",severity:"HIGH"}]}]});try{await ce(e)}catch(r){return s("validateWebappUrl Error:"),s(v(r)),new y({confidence:1,feedbacks:[{text:`UNACCEPTABLE: Unaccessible projectRunUrl '${e}'.`,structured:{violation:"UNACCESSIBLE_PROJECT_RUN_ADDRESS",testId:"N/A",severity:"BLOCKING",penalty:"$500"},suggestions:[{type:"action",content:"Provide an accessible URL for projectRunUrl",severity:"HIGH"}]}]})}}},"assertProjectRunUrl"),Ht=u(async i=>{let{targetTests:e}=i;if(e){if(!Array.isArray(e))return s("[assertTargetTests] Returning CRITIQUE - targetTests must be an array"),new y({confidence:1,feedbacks:[{text:"UNACCEPTABLE: targetTests must be an array. FORBIDDEN to proceed with invalid format.",structured:{violation:"INVALID_TARGET_TESTS_FORMAT",testId:"N/A",severity:"BLOCKING",penalty:"$500"},suggestions:[{type:"action",content:"Provide targetTests as an array of objects with testId and context fields.",severity:"HIGH"}]}]});for(let t=0;t<e.length;t++){let r=e[t];if(!r||typeof r!="object")return s(`[assertTargetTests] Returning CRITIQUE - targetTests[${t}] must be an object`),new y({confidence:1,feedbacks:[{text:`UNACCEPTABLE: targetTests[${t}] must be an object. FORBIDDEN to proceed with invalid format.`,structured:{violation:"INVALID_TARGET_TEST_ITEM",testId:"N/A",severity:"BLOCKING",penalty:"$500"},suggestions:[{type:"action",content:"Each targetTest item must be an object with testId and context fields.",severity:"HIGH"}]}]});if(!r.testId||typeof r.testId!="string")return s(`[assertTargetTests] Returning CRITIQUE - targetTests[${t}].testId must be a string`),new y({confidence:1,feedbacks:[{text:`UNACCEPTABLE: targetTests[${t}].testId must be a string. FORBIDDEN to proceed without valid testId.`,structured:{violation:"MISSING_TARGET_TEST_ID",testId:"N/A",severity:"BLOCKING",penalty:"$500"},suggestions:[{type:"action",content:"Provide a valid testId string that matches a testId in test_plan.",severity:"HIGH"}]}]});if(!r.context||typeof r.context!="string")return s(`[assertTargetTests] Returning CRITIQUE - targetTests[${t}].context must be a string`),new y({confidence:1,feedbacks:[{text:`UNACCEPTABLE: targetTests[${t}].context must be a string. FORBIDDEN to proceed without context.`,structured:{violation:"MISSING_TARGET_TEST_CONTEXT",testId:"N/A",severity:"BLOCKING",penalty:"$500"},suggestions:[{type:"action",content:"Provide a context string explaining why this test is being re-run.",severity:"HIGH"}]}]})}s(`[assertTargetTests] Validated ${e.length} target tests structure successfully`)}},"assertTargetTests"),Ze=u(i=>{let e=i.filter(({result:r,error:o})=>o||r?.decision!=="PASS");if(e.length){let r=e.map(({result:a,error:m})=>a||m?.toEvaluationResult()),o=r.flatMap(a=>a.feedbacks||[]).filter(a=>!!a?.text?.trim()||!!a.structured?.violation);return{decision:"CRITIQUE",confidence:Math.max(...r.map(a=>a.confidence)),feedbacks:o,metadata:{parallelExecutions:i.length}}}let t=i.flatMap(({result:r})=>r.feedbacks||[]).filter(r=>!!r?.text?.trim());return{decision:"PASS",confidence:i.length>0?Math.min(...i.map(({result:r})=>r.confidence)):0,feedbacks:t,metadata:{parallelExecutions:i.length}}},"aggregateTestResults");function et(i=6){try{let e=Ut().length,t=Math.round(Bt()/1024/1024),r=Math.round(Lt()/1024/1024),o=ie(),n=1/0;try{if(o!=="windows"){let g=Ft("ulimit -n",{encoding:"utf8",timeout:1e3}).trim(),f=parseInt(g);!isNaN(f)&&f>0&&(n=Math.floor(f/60),s(`[calculateOptimalParallelInstances] File descriptor limit: ${f}, allowing ~${n} instances`))}}catch(g){s(`[calculateOptimalParallelInstances] Could not check file descriptor limits: ${g}`)}let a=150,m;if(r<2048){let g;t<=8192?g=800:t<=16384?g=1200:t<=32768?g=1800:g=2400,m=Math.max(1,Math.min(Math.floor(g/a),10)),s(`[calculateOptimalParallelInstances] Memory pressure detected (${r}MB free), using tiered allocation: ${g}MB available for ${t}MB system`)}else{let g=Math.min(2048,Math.max(1024,r*.2)),f=Math.max(0,r-g);m=Math.floor(f/a)}let l=Math.max(1,Math.min(Math.floor(e*2),14)),c;switch(o){case"macos":c=Math.min(e*2+4,16);break;case"linux":c=Math.min(e*2+6,18);break;case"windows":c=Math.min(e*2,12);break;default:c=Math.min(e*2,12)}let p=Math.max(1,Math.min(m,l,c,n,16));return s(`[calculateOptimalParallelInstances] System info: ${e} CPUs, ${t.toLocaleString()}MB total RAM, ${r.toLocaleString()}MB free RAM, OS: ${o}`),s(`[calculateOptimalParallelInstances] Memory calculation: Per instance ${a}MB, Memory-based limit: ${m}`),s(`[calculateOptimalParallelInstances] Calculated limits - Memory: ${m}, CPU: ${l}, Platform: ${c}, FD: ${n===1/0?"unlimited":n}`),s(`[calculateOptimalParallelInstances] Selected optimal instances: ${p}`),p}catch(e){return s(`[calculateOptimalParallelInstances] Error calculating optimal instances: ${e}`),s(`[calculateOptimalParallelInstances] Falling back to default: ${i}`),i}}u(et,"calculateOptimalParallelInstances");var xe=u((i,e,t)=>(s(`[toDashboardSessionUpdate] session: ${i.session_uid}, currentStep: ${e}, test_steps: ${JSON.stringify(i.test_steps)}`),{sessionUid:i.session_uid,currentStep:e,totalSteps:i.test_steps.length,taskName:i.test_name,taskDescription:i.test_description,testId:i.test_id,stepDescriptions:i.test_steps.map((r,o)=>(s(`[buildDashboardSession] Step ${o}: ${JSON.stringify(r)}`),s(`[buildDashboardSession] Step ${o} action type: ${typeof r.action}, value: ${JSON.stringify(r.action)}`),typeof r.action=="string"?r.action:(s(`[buildDashboardSession] WARNING: Step ${o} action is not a string, converting: ${JSON.stringify(r.action)}`),String(r.action||"Unknown action")))),lastUpdate:Date.now(),screenshot:t}),"toDashboardSessionUpdate"),tt=u(i=>{for(let e=0;e<i.length;e++){let t=i[e];if(!t.session_uid)throw new Error(`No session uid found in session ${e}`);if(!t.test_id)throw new Error(`No test ID found in session ${t.session_uid}`);if(!t.test_name&&!t.test_description)throw new Error(`No test name nor description found in session ${t.session_uid}`);if(!t.test_steps?.filter(r=>(r&&typeof r.action!="string"&&s(`[assertQASessions] Invalid action type in session ${t.session_uid}: action=${JSON.stringify(r.action)}, step=${JSON.stringify(r)}`),r?.action&&typeof r.action=="string"&&r.action.trim().length>0)).length)throw new Error(`No valid test steps found in session ${t.session_uid}`)}},"assertQASessions");import*as F from"path";import*as pe from"fs";import{fileURLToPath as Gt}from"url";import jt from"puppeteer";var st=u((i,e)=>{s(`[fromQASessionToDashboardSession] session: ${i.session_uid}, test_steps: ${JSON.stringify(i.test_steps)}`);let t=i.test_steps.map((r,o)=>(s(`[fromQASessionToDashboardSession] Step ${o}: ${JSON.stringify(r)}`),s(`[fromQASessionToDashboardSession] Step ${o} action type: ${typeof r.action}, value: ${JSON.stringify(r.action)}`),typeof r.action=="string"?r.action:(s(`[fromQASessionToDashboardSession] WARNING: Step ${o} action is not a string, converting: ${JSON.stringify(r.action)}`),String(r.action||"Unknown action"))));return{sessionUid:i.session_uid,position:e,status:"pending",taskName:i.test_name,taskDescription:i.test_description,testId:i.test_id,currentStep:0,totalSteps:i.test_steps.length,stepDescriptions:t,lastUpdate:Date.now()}},"fromQASessionToDashboardSession");var Wt=Gt(import.meta.url),it=F.dirname(Wt),L,A,de,H={maxRetries:3,retryDelay:1e3,recoveryDelay:500},ot=u(i=>{let e=i;for(;e!==F.dirname(e);){let t=F.join(e,"package.json");if(pe.existsSync(t))return e;e=F.dirname(e)}return process.cwd()},"findProjectRoot");async function qt(){try{if(s("\u{1F504} Attempting to recover dashboard page connection..."),!L||!L.isConnected())return s("\u274C Dashboard browser is disconnected, cannot recover"),!1;let e=(await L.pages()).find(n=>!n.isClosed());if(e)return A=e,s("\u2705 Recovered dashboard page connection"),!0;let t=ot(it),o=`file://${F.join(t,"src/dashboard/index.html")}`;return A=await L.newPage(),await A.goto(o),A.on("console",async n=>{let a=n.text();if((a.includes("EXTERNAL_URL_REQUEST")||a.includes("Opening external app dashboard"))&&s(`[Dashboard Console] ${a}`),a.startsWith("EXTERNAL_URL_REQUEST:")){let m=a.replace("EXTERNAL_URL_REQUEST:","").trim();s(`[Dashboard] Opening external URL in system browser: ${m}`);let{default:l}=await import("open");try{await l(m),s(`[Dashboard] Successfully opened ${m} in system browser`)}catch(c){s(`[Dashboard] Failed to open ${m}: ${c.message}`)}}}),await A.evaluate(()=>{window.addEventListener("openExternalUrl",n=>{console.log("EXTERNAL_URL_REQUEST:",n.detail.url)})}),await new Promise(n=>setTimeout(n,H.recoveryDelay)),s(`\u2705 Created new dashboard page and navigated to ${o}`),!0}catch(i){return s(`\u274C Failed to recover dashboard page: ${i}`),!1}}u(qt,"recoverDashboardPage");async function Z(i,e,t){let r=null;for(let o=1;o<=H.maxRetries;o++)try{return await i()}catch(n){r=n;let a=t?` for session ${t}`:"";if(s(`\u26A0\uFE0F Dashboard error in ${e}${a} (attempt ${o}/${H.maxRetries}): ${r.message}`),o===H.maxRetries){s(`\u274C Max retries reached for ${e}${a}`);break}if(!await qt()){s(`\u274C Failed to recover dashboard page, stopping retries for ${e}${a}`);break}await new Promise(l=>setTimeout(l,H.retryDelay)),s(`\u{1F504} Retrying ${e}${a} (attempt ${o+1}/${H.maxRetries})`)}if(r){let o=t?` for session ${t}`:"";s(`\u274C Failed to execute ${e}${o} after ${H.maxRetries} attempts: ${r.message}`)}return null}u(Z,"executeWithRetry");var nt=u(async(i,e,t,r)=>{try{s(`\u{1F680} Opening Puppeteer dashboard with ${i.length} sessions`);let o=ot(it),n=F.join(o,"dist/dashboard/index.html"),a=F.join(o,"src/dashboard/index.html"),m=pe.existsSync(n)?n:a;if(!pe.existsSync(m))throw new Error(`Dashboard HTML file not found at: ${m}`);if(L&&A)return s("\u{1F504} Reusing existing dashboard browser instance"),await rt(e,i,t,r);let l=`file://${m}`;return L=await jt.launch({headless:!1,defaultViewport:null,protocolTimeout:0,args:["--no-sandbox","--disable-setuid-sandbox","--start-maximized","--app="+l,"--disable-web-security","--disable-features=VizDisplayCompositor","--disable-background-timer-throttling","--disable-renderer-backgrounding","--disable-backgrounding-occluded-windows","--disable-infobars","--disable-session-crashed-bubble","--disable-translate","--no-first-run","--disable-default-apps"]}),de=N.register(L,"Dashboard-Browser"),A=(await L.pages())[0],A.on("console",async p=>{let g=p.text();if((g.includes("EXTERNAL_URL_REQUEST")||g.includes("Opening external app dashboard"))&&s(`[Dashboard Console] ${g}`),g.startsWith("EXTERNAL_URL_REQUEST:")){let f=g.replace("EXTERNAL_URL_REQUEST:","").trim();s(`[Dashboard] Opening external URL in system browser: ${f}`);let{default:h}=await import("open");try{await h(f),s(`[Dashboard] Successfully opened ${f} in system browser`)}catch(b){s(`[Dashboard] Failed to open ${f}: ${b.message}`)}}}),await A.evaluate(()=>{window.addEventListener("openExternalUrl",p=>{console.log("EXTERNAL_URL_REQUEST:",p.detail.url)})}),L.on("disconnected",()=>{s("\u{1F534} Dashboard browser disconnected"),de&&(N.unregister(de),de=void 0),L=void 0,A=void 0}),s(`\u2705 Dashboard opened in maximized app mode: file://${m}`),await rt(e,i,t,r)}catch(o){s(`\u274C Failed to open dashboard: ${o}`);return}},"openRealtimeBrowser");async function rt(i,e,t,r){if(s(`[initializeDashboardData] manual filter: ${i}, num of total sessions: ${e.length}`),!A)return;let o=i?await Jt(e):void 0;if(i&&!o?.length)throw new Error("Manual filter enabled, but no tests were selected");let n=o?.length?e.filter(l=>o.includes(l.test_id)):e;s(`[initializeDashboardData] num of filtered sessions: ${n.length}`);let a=n.map((l,c)=>st(l,c));return await Z(async()=>{await A.evaluate((l,c,p)=>{window.addEventListener("openExternalUrl",g=>{console.log("EXTERNAL_URL_REQUEST:",g.detail.url)}),window.dispatchEvent(new CustomEvent("dashboardInit",{detail:{sessions:l,appUid:c,apiUrl:p}}))},a,t,r)},"initializeDashboardData")!==null&&s(`\u{1F4CA} Dashboard initialized with ${a.length} sessions`),o}u(rt,"initializeDashboardData");async function Jt(i){if(A)try{s(`\u{1F3AF} Showing test filtering UI for ${i.length} tests`);let e=i.map(r=>({id:r.test_id,title:r.test_name||r.test_description})),t=await A.evaluate(`
            (function(tests) {
                return new Promise(function(resolve) {
                    console.log('\u{1F3AF} [PAGE] Starting filtering UI with ' + tests.length + ' tests');

                    // Dispatch event to show filtering UI
                    window.dispatchEvent(
                        new CustomEvent("showTestFilter", {
                            detail: { tests: tests },
                        })
                    );

                    console.log('\u23F3 [PAGE] Waiting for user selection...');

                    // Wait for user to make selection
                    var handleFilterComplete = function(event) {
                        var customEvent = event;
                        console.log(
                            '\u{1F389} [PAGE] Filter complete event received with IDs:',
                            customEvent.detail.selectedTestIds
                        );
                        window.removeEventListener("filterComplete", handleFilterComplete);
                        resolve(customEvent.detail.selectedTestIds);
                    };
                    window.addEventListener("filterComplete", handleFilterComplete);
                    console.log(
                        '\u{1F442} [PAGE] Event listener set up, waiting for filterComplete event'
                    );
                });
            })(${JSON.stringify(e)})
                `);return s(`\u2705 User selected ${t?.length||0} ${oe(t?.length||0,"test")}: ${t?.join(", ")||"none"}`),t}catch(e){s(`\u274C Failed to show test filtering UI: ${e}`);return}}u(Jt,"showTestFilteringUI");var at=u(async i=>{if(!A)return;await Z(async()=>{await A.evaluate(t=>{window.dispatchEvent(new CustomEvent("dashboardRunning",{detail:{sessionUid:t}}))},i)},"markDashboardSessionRunning",i)!==null&&s(`\u{1F504} Dashboard session ${i} marked as running`)},"markDashboardSessionRunning"),Ce=u(async i=>{if(!A){s(`\u26A0\uFE0F Dashboard not available for session ${i.sessionUid}`);return}await Z(async()=>{await A.evaluate(t=>{let r={sessionUid:t.sessionUid,status:"running",currentStep:t.currentStep,totalSteps:t.totalSteps,taskName:t.taskName,taskDescription:t.taskDescription,stepDescriptions:t.stepDescriptions,lastUpdate:Date.now(),testId:t.testId};window.dispatchEvent(new CustomEvent("dashboardUpdate",{detail:{sessionUid:t.sessionUid,data:r,screenshot:t.screenshot}}))},i)},"updateDashboardSession",i.sessionUid)!==null&&s(`\u{1F4C8} Dashboard updated for session ${i.sessionUid}`)},"updateDashboardSession"),Re=u(async(i,e)=>{if(!A)return;await Z(async()=>{await A.evaluate((r,o)=>{window.dispatchEvent(new CustomEvent("dashboardComplete",{detail:{sessionUid:r,result:o}}))},i,e)},"markDashboardSessionComplete",i)!==null&&s(`\u{1F3C1} Dashboard session ${i} marked as ${e.decision} (kept visible)`)},"markDashboardSessionComplete"),Ie=u(async i=>{if(!A)return;await Z(async()=>{await A.evaluate(t=>{window.dispatchEvent(new CustomEvent("dashboardAborted",{detail:{sessionUid:t}}))},i)},"markDashboardSessionAborted",i)!==null&&s(`\u{1F6D1} Dashboard session ${i} marked as aborted`)},"markDashboardSessionAborted");import is from"p-limit";import Kt from"puppeteer";import Yt from"sharp";import me from"imghash";import{writeFileSync as _e,mkdirSync as Xt}from"fs";import{resolve as ge}from"path";async function Zt(i,e,t){let r=Date.now();s(`\u{1F50D} Starting hover analysis for: ${i}`),t&&s(`\u{1F3AF} Filtering to ${t.length} specific selectors`);let o=await Kt.launch({headless:!e["no-headless"],defaultViewport:e.viewport?{width:e.viewport.width,height:e.viewport.height,deviceScaleFactor:1}:null,args:["--disable-web-security","--disable-features=VizDisplayCompositor"]}),n=await o.newPage();try{s(`\u{1F4C4} Loading page: ${i}`),await n.goto(i,{waitUntil:"networkidle0",timeout:3e4}),await new Promise(c=>setTimeout(c,2e3)),s("\u{1F50E} Analyzing hoverable elements...");let a=await es(n,t);e["analyze-hover-impact"]&&(s("\u{1F4F8} Performing visual hover impact analysis..."),await lt(n,a));let m=Date.now()-r,l={url:i,timestamp:new Date().toISOString(),totalElements:a.length,hoverableElements:a,analysisTime:m};return s(`\u2705 Analysis complete! Found ${a.length} hoverable elements in ${m}ms`),l}finally{await o.close()}}u(Zt,"analyzeHoverableElements");async function es(i,e){return await i.evaluate(t=>{let r=[],o;t&&t.length>0?(o=[],t.forEach(l=>{try{let c=Array.from(document.querySelectorAll(l));o.push(...c)}catch(c){console.warn(`Invalid selector: ${l}`,c)}})):o=Array.from(document.querySelectorAll("*"));for(let l=0;l<o.length;l++){let c=o[l];if(!n(c))continue;let p=a(c);if(p.length>0){let g=c.getBoundingClientRect(),f=m(c),h=c.textContent?.trim().substring(0,100)||"",b={};["id","class","href","role","aria-label","title","data-testid"].forEach($=>{let R=c.getAttribute($);R&&(b[$]=R)}),r.push({selector:f,tagName:c.tagName.toLowerCase(),text:h,attributes:b,boundingBox:{x:Math.round(g.x),y:Math.round(g.y),width:Math.round(g.width),height:Math.round(g.height)},hoverIndicators:p})}}return r;function n(l){let c=window.getComputedStyle(l),p=l.getBoundingClientRect();return c.display!=="none"&&c.visibility!=="hidden"&&c.opacity!=="0"&&p.width>0&&p.height>0&&p.top<window.innerHeight&&p.bottom>0&&p.left<window.innerWidth&&p.right>0}function a(l){let c=[];window.getComputedStyle(l).cursor==="pointer"&&c.push("cursor:pointer"),["a","button","input","select","textarea"].includes(l.tagName.toLowerCase())&&c.push("interactive-tag"),(l.onclick||l.getAttribute("onclick"))&&c.push("onclick-handler");let f=l.getAttribute("role");f&&["button","link","menuitem","tab","option"].includes(f)&&c.push("interactive-role");let b=l.getAttribute("tabindex");b&&b!=="-1"&&c.push("focusable"),l.getAttribute("href")&&c.push("has-href");let E=l.className;if(typeof E=="string"){let $=[/hover/i,/btn/i,/button/i,/link/i,/clickable/i,/interactive/i,/item/i,/card/i,/row/i];for(let R of $)if(R.test(E)){c.push("hover-class-pattern");break}}try{l.querySelector("button, input, a, [onclick], [tabindex]")&&l.children.length>1&&c.push("container-with-interactive-children");let R=["task-item","list-item","card","row","item","entry","record","tile","panel"],x=E.toLowerCase();for(let D of R)if(x.includes(D)){c.push("common-hoverable-container");break}}catch{}return c}function m(l){if(l.id)return`#${l.id}`;if(l.className&&typeof l.className=="string"){let g=l.className.trim().split(/\s+/).filter(f=>f.length>2&&!["active","show","hide","open","closed"].includes(f.toLowerCase()));if(g.length>0)return`${l.tagName.toLowerCase()}.${g[0]}`}let c=l.parentElement;if(c){let p=Array.from(c.children).filter(g=>g.tagName===l.tagName);if(p.length>1){let g=p.indexOf(l)+1;return`${l.tagName.toLowerCase()}:nth-of-type(${g})`}}return l.tagName.toLowerCase()}},e)}u(es,"findHoverableElements");async function lt(i,e){s(`\u{1F4F8} Starting visual analysis for ${e.length} elements...`);let t=ge(process.cwd(),"debug");try{Xt(t,{recursive:!0}),s(`\u{1F4C1} Created debug directory: ${t}`)}catch(a){s(`\u{1F4C1} Debug directory already exists or creation failed: ${a}`)}let r=0;for(let a of e)try{r++,s(`\u{1F4F8} Analyzing element ${r}/${e.length}: ${a.selector}`),await i.evaluate(c=>{let p=document.querySelector(c);p&&p.scrollIntoView({behavior:"instant",block:"center"})},a.selector),await new Promise(c=>setTimeout(c,100));let m=await i.screenshot({fullPage:!1,type:"png"}),l=ge(t,`element-${r.toString().padStart(2,"0")}-before.png`);_e(l,m);try{await i.hover(a.selector),await new Promise(f=>setTimeout(f,300));let c=await i.screenshot({fullPage:!1,type:"png"}),p=ge(t,`element-${r.toString().padStart(2,"0")}-after.png`);_e(p,c),s(`\u{1F4BE} Saved screenshots: ${l.split("/").pop()} & ${p.split("/").pop()}`);let g=await ts(Buffer.from(m),Buffer.from(c),a.boundingBox);a.hoverAnalysis=g,await i.mouse.move(0,0),await new Promise(f=>setTimeout(f,100))}catch(c){s(`\u26A0\uFE0F Could not hover element ${a.selector}: ${c}`),a.hoverAnalysis={hasVisualChange:!1,changeScope:"none",changeIntensity:0,changesOutsideElement:!1,changeDescription:`Could not hover element: ${c}`}}}catch(m){s(`\u274C Error analyzing element ${a.selector}: ${m}`),a.hoverAnalysis={hasVisualChange:!1,changeScope:"none",changeIntensity:0,changesOutsideElement:!1,changeDescription:`Analysis failed: ${m}`}}let o=ge(t,"element-summary.txt"),n=e.map((a,m)=>{let l=(m+1).toString().padStart(2,"0"),c=a.hoverAnalysis?.hasVisualChange?"\u2705":"\u274C",p=a.hoverAnalysis?.changeIntensity||0;return`${l}. ${c} ${a.tagName.toUpperCase()} - ${a.selector} (${p}% change)`}).join(`
`);_e(o,n),s(`\u{1F4CB} Created element summary: ${o}`),s(`\u2705 Visual analysis complete for ${r} elements`)}u(lt,"performHoverVisualAnalysis");async function ts(i,e,t){let r=await rs(i,e);if(r.totalChangedPixels===0)return{hasVisualChange:!1,changeScope:"none",changeIntensity:0,changesOutsideElement:!1,changeDescription:"No visual changes detected (pHash comparison)"};let o=Math.round(100-r.similarityPercentage),n=r.changesOutsideElement,a;o>0?a="element-only":a="none";let m=r.hammingDistance===-1?"byte comparison":"pHash (DCT)",l=r.hammingDistance!==-1?` (Hamming distance: ${r.hammingDistance})`:"",c=`${o}% perceptual change detected using ${m}${l}. ${n?"Changes detected outside element bounds.":"Changes confined to element area."}`;return{hasVisualChange:!0,changeScope:a,changeIntensity:o,changesOutsideElement:n,changeDescription:c}}u(ts,"analyzeVisualDifference");function ss(i,e){if(i.length!==e.length)throw new Error("Hash lengths must be equal for Hamming distance calculation");let t=0;for(let r=0;r<i.length;r++)i[r]!==e[r]&&t++;return t}u(ss,"hammingDistance");async function rs(i,e){try{let t=await me.hash(i.toString("base64"),16,"hex"),r=await me.hash(e.toString("base64"),16,"hex"),o=me.hexToBinary(t),n=me.hexToBinary(r),a=ss(o,n),m=o.length,l=(m-a)/m*100,c=100-l,p=await Yt(i).metadata(),g=(p.width||0)*(p.height||0),f=Math.round(c/100*g),h=!1;return s(`\u{1F50D} pHash (DCT) Analysis: Hamming distance: ${a}/${m}, Similarity: ${l.toFixed(1)}%, Change: ${c.toFixed(1)}%`),{totalPixels:g,totalChangedPixels:f,changesOutsideElement:h,hammingDistance:a,similarityPercentage:l}}catch(t){s(`\u26A0\uFE0F pHash comparison failed, falling back to basic comparison: ${t}`);let r=Math.min(i.length,e.length),o=0;for(let a=0;a<r;a++)i[a]!==e[a]&&o++;let n=o/r*100;return{totalPixels:r,totalChangedPixels:o,changesOutsideElement:n>10,hammingDistance:-1,similarityPercentage:100-n}}}u(rs,"comparePixels");function ct(i){try{s(`\u{1F50D} DEBUG: DOM data type: ${typeof i}`);let e=i?.elements||[];s(`\u{1F50D} Found ${e.length} total elements in DOM`);let t=e.filter(o=>o.elementId&&o.elementId.trim()!=="");s(`\u{1F3AF} Found ${t.length} elements with elementId (data-qa-id)`);let r=t.map(o=>{let n=`[data-qa-id="${o.elementId}"]`;return{elementId:o.elementId,selector:n,bounds:{x:o.bounds?.left||0,y:o.bounds?.top||0,width:o.bounds?.width||0,height:o.bounds?.height||0},text:o.text||"",interaction:o.interaction||"unknown",hasHover:o.hasHover||!1}});return r.length>0?(s("\u{1F3AF} QA elements for hover analysis:"),r.slice(0,5).forEach((o,n)=>{s(`  ${n+1}. ${o.selector} (${o.interaction}) - "${o.text.substring(0,50)}"`)}),r.length>5&&s(`  ... and ${r.length-5} more`)):(s("\u26A0\uFE0F No elements with elementId found. Sample elements:"),e.slice(0,3).forEach((o,n)=>{s(`  ${n+1}. text: "${o.text?.substring(0,50)||"N/A"}", elementId: "${o.elementId||"NONE"}", interaction: "${o.interaction||"N/A"}"`)})),r}catch(e){return s(`\u26A0\uFE0F Error extracting QA elements from DOM: ${e}`),[]}}u(ct,"extractQAElementsFromDOM");async function ut(i,e){let t=Date.now();s(`\u{1F50D} Starting QA hover analysis for ${e.length} elements`);try{let r=e.map(a=>({selector:a.selector,tagName:"unknown",text:a.text,attributes:{"data-qa-id":a.elementId,interaction:a.interaction},boundingBox:a.bounds,hoverIndicators:a.hasHover?["css-hover"]:["interactive"]}));r.length>0&&await lt(i,r);let o=Date.now()-t,n=r.filter(a=>a.hoverAnalysis?.changeIntensity&&a.hoverAnalysis.changeIntensity>0).map(a=>({elementId:a.attributes["data-qa-id"],changeIntensity:a.hoverAnalysis.changeIntensity}));return s(`\u2705 QA hover analysis complete! Found ${n.length} elements with hover changes (analyzed ${r.length} total) in ${o}ms`),{totalElements:n.length,hoverableElements:n,analysisTime:o}}catch(r){throw s(`\u274C QA hover analysis failed: ${r}`),r}}u(ut,"runHoverAnalysisOnQAElements");async function dt(i,e){try{if(s("\u{1F680} Starting hover analysis tool"),!i)throw new Error("URL is required for hover analysis");!i.startsWith("http://")&&!i.startsWith("https://")&&(i=`https://${i}`);let t=await Zt(i,e);e.output?((await import("fs")).writeFileSync(e.output,JSON.stringify(t,null,2)),s(`\u{1F4C4} Results saved to: ${e.output}`)):(console.log(`
`+"=".repeat(60)),console.log("\u{1F3AF} HOVER ANALYSIS RESULTS"),console.log("=".repeat(60)),console.log(`URL: ${t.url}`),console.log(`Analysis Time: ${t.analysisTime}ms`),console.log(`Total Hoverable Elements: ${t.totalElements}`),console.log("=".repeat(60)),t.hoverableElements.forEach((r,o)=>{if(console.log(`
${o+1}. ${r.tagName.toUpperCase()} - ${r.selector}`),r.text&&console.log(`   Text: "${r.text}"`),console.log(`   Position: (${r.boundingBox.x}, ${r.boundingBox.y}) ${r.boundingBox.width}x${r.boundingBox.height}`),console.log(`   Hover Indicators: ${r.hoverIndicators.join(", ")}`),Object.keys(r.attributes).length>0&&console.log(`   Attributes: ${JSON.stringify(r.attributes)}`),r.hoverAnalysis){let n=r.hoverAnalysis;console.log("   \u{1F3A8} Visual Analysis:"),console.log(`      Change Detected: ${n.hasVisualChange?"\u2705 Yes":"\u274C No"}`),n.hasVisualChange&&(console.log(`      Change Scope: ${n.changeScope}`),console.log(`      Change Intensity: ${n.changeIntensity}%`),console.log(`      Changes Outside Element: ${n.changesOutsideElement?"\u26A0\uFE0F Yes":"\u2705 No"}`),console.log(`      Description: ${n.changeDescription}`))}}),console.log(`
`+"=".repeat(60)))}catch(t){console.error(`\u274C Hover analysis failed: ${t instanceof Error?t.message:t}`),process.exit(1)}}u(dt,"handleHoverAnalysis");var fe=class i{static{u(this,"EvaluatorOptimizer")}static evalCalls=0;tool=new le;args;constructor(e){this.args=e}async evaluate(e){let t=`evaluate-${++i.evalCalls}-${Date.now()}`;d.start("evaluate",{uid:t});try{s("=== [EvaluatorOptimizer] evaluate called: ===");let r=JSON.stringify(e,null,2);s(r),d.start("evaluate-request-validation",{uid:t});let o=await Xe(e);if(d.end("evaluate-request-validation",{uid:t,hasError:!!o}),o)throw d.end("evaluate",{uid:t,result:"assertion-error"}),s("=== [EvaluatorOptimizer] assertion error: ==="),s(JSON.stringify(o,null,2)),o;s("=== [EvaluatorOptimizer] Starting parallel QA automation workflow ==="),V.evaluateStarted();let n=await this.executeQAWorkflow(e),a=n.decision==="PASS";return d.end("evaluate",{uid:t,result:n.decision}),{...n,systemNotifications:n.systemNotifications||[{type:a?"success":"warning",message:a?`${se} has completed the evaluation. All passed!`:`${se} has found ${n.feedbacks.length} ${oe(n.feedbacks.length,"issue")}. I'm on it!`,priority:"high",actionRequired:!a}]}}catch(r){throw d.end("evaluate",{uid:t,result:"error"}),s("=== [EvaluatorOptimizer] Error during evaluation: ==="),s(v(r)),K(r,new y({confidence:.1,feedbacks:[{text:"SYSTEM ERROR: Evaluator offline. FORBIDDEN to proceed without validation.",structured:{violation:`EVALUATOR_FAILURE: ${r.message}`,testId:"N/A",penalty:"$500"}}],metadata:{error:r.message},systemNotifications:[{type:"error",message:`${se} is offline. Please contact support for assistance.`,priority:"high",actionRequired:!0}]})),r}}async executeQAWorkflow(e){let t=`workflow-${i.evalCalls}-${Date.now()}`;d.start("executeQAWorkflow",{uid:t});let{projectFolderPath:r,projectRunCommand:o,projectRunUrl:n,appDescription:a,targetTests:m,userPrompt:l,fps:c}=e,{start:p,only:g,onlyIndex:f,onlyTestId:h,ignoreIndices:b,ignoreStrings:E,"fail-fast":$,"manual-filter":R}=this.args,x,D;try{if(d.start("webapp-setup",{uid:t}),n)try{await ce(n),x=n,s(`[EvaluatorOptimizer] Using provided webapp URL: ${n}`)}catch(w){d.end("webapp-setup",{uid:t,result:"url-validation-failed"}),d.end("executeQAWorkflow",{uid:t,result:"url-validation-failed"}),s("[EvaluatorOptimizer] Failed to validate provided webapp URL"),s(v(w));let C=n?.startsWith("file:///");throw new y({confidence:.1,feedbacks:[{text:C?`Cannot access the specified file at ${n}. Please ensure the file exists and is accessible.`:`Cannot connect to the specified running server at ${n}. Please ensure the server is running and accessible.`,structured:{violation:`${C?"FILE_NOT_FOUND":"RUNNING_SERVER_UNAVAILABLE"}: ${w?.message||"Unknown error"}`,testId:"N/A",severity:"BLOCKING"},suggestions:[{type:"action",content:C?`Verify that the file exists at the specified path: ${n}`:`Verify that the development server is running at ${n} and accessible.`,severity:"HIGH"}]}]})}else if(o)try{D=new Y,x=(await D.startWebapp(r,o)).url,s(`[EvaluatorOptimizer] Started webapp at "${x}"`)}catch(w){throw d.end("webapp-setup",{uid:t,result:"webapp-start-failed"}),d.end("executeQAWorkflow",{uid:t,result:"webapp-start-failed"}),s("[EvaluatorOptimizer] Failed to start webapp"),s(v(w)),new y({confidence:.9,feedbacks:[{text:`Failed to start webapp: ${w.message}`,structured:{violation:`WEBAPP_START_FAILURE: ${w.message}`,testId:"N/A",severity:"BLOCKING"},suggestions:[{type:"action",content:"Check the project run command and ensure all dependencies are installed.",severity:"HIGH"}]}]})}if(!x)throw new Error("No webapp URL available - this should not happen");d.end("webapp-setup",{uid:t,webappUrl:x});let S=r.split("/").filter(Boolean).pop()||"unknown-app";s(`[EvaluatorOptimizer] Starting QA workflow for "${S}"`),d.start("sessions-preparation",{uid:t});let M=Ye(r),T=Ae(r);if(f||h){s("[EvaluatorOptimizer] ========== --only parameter detected =========="),s(`[EvaluatorOptimizer] onlyIndex: ${f}`),s(`[EvaluatorOptimizer] onlyTestId: ${h}`),s(`[EvaluatorOptimizer] Original test plan length: ${T.length} characters`),s(`[EvaluatorOptimizer] Original test plan content (first 200 chars):
${T.substring(0,200)}...`);try{s("[EvaluatorOptimizer] Calling filterTestPlanCSV...");let w=await Te(T,f,h);if(s("[EvaluatorOptimizer] filterTestPlanCSV returned successfully"),s(`[EvaluatorOptimizer] Filter result - found: ${w.found}, originalTestCount: ${w.originalTestCount}, filteredTestCount: ${w.filteredTestCount}`),!w.found){let C=h||`index ${f}`;throw new y({confidence:1,feedbacks:[{text:`Test not found: "${C}" does not exist in the test plan. Available tests: ${w.originalTestCount}`,structured:{violation:"INVALID_TEST_FILTER",testId:h||`index-${f}`,severity:"BLOCKING"},suggestions:[{type:"action",content:`Check your test plan and use a valid test ID or index (1-${w.originalTestCount})`,severity:"HIGH"}]}]})}s(`[EvaluatorOptimizer] Filtered test plan length: ${w.filteredCSV.length} characters`),s(`[EvaluatorOptimizer] Filtered test plan content:
${w.filteredCSV}`),T=w.filteredCSV,s("[EvaluatorOptimizer] Successfully applied filtered test plan")}catch(w){if(s(`[EvaluatorOptimizer] ERROR filtering test plan CSV: ${v(w)}`),s(`[EvaluatorOptimizer] Error stack: ${w instanceof Error?w.stack:"No stack trace"}`),w instanceof y)throw s("[EvaluatorOptimizer] Re-throwing CritiqueError for invalid test filter"),w;s("[EvaluatorOptimizer] Continuing with original test plan due to unexpected filtering error")}s("[EvaluatorOptimizer] ========== End --only parameter processing ==========")}else s(`[EvaluatorOptimizer] No --only parameter detected (onlyIndex: ${f}, onlyTestId: ${h})`);let j=Pe(r),{sessions:P,runId:k}=await new Q(this.args["api-url"]).asyncPrepWithStatePolling({app_uid:M,app_name:S,app_description:a,context:{timestamp:Date.now(),locale:Intl.DateTimeFormat().resolvedOptions().locale||"en_US"},initial_plan:T,user_flows:j,requirements:l,target_tests:JSON.stringify(m??[]),only:f||h?void 0:typeof g=="number"?g:void 0,start:p,ignore_indices:b,ignore_test_ids:E,thinking_budget:this.args["thinking-budget"]});if(tt(P),s(`[EvaluatorOptimizer] Received ${P.length} QA sessions from /async_prep endpoint (after server-side filtering) for runId: ${k}`),P.length===0)throw d.end("sessions-preparation",{uid:t,result:"no-sessions-available"}),d.end("executeQAWorkflow",{uid:t,result:"no-sessions-available"}),new y({confidence:1,feedbacks:[{text:"No sessions available to run. This may be due to filtering parameters or no test plan available.",structured:{violation:"NO_SESSIONS_AVAILABLE",testId:"N/A",severity:"BLOCKING"},suggestions:[{type:"action",content:"Review your filtering parameters and ensure test plan is available.",severity:"HIGH"}]}],metadata:{filteredSessionCount:P.length,hasOnlyFilter:g!==void 0,hasStartFilter:p!==void 0,hasIgnoreFilters:(b?.length||0)+(E?.length||0)>0}});if(d.end("sessions-preparation",{uid:t,runId:k,sessionCount:P.length}),s(`[EvaluatorOptimizer] Prepared ${P.length} QA sessions:
${P.map(w=>w.session_uid).join(`
`)}`),J)s("[EvaluatorOptimizer] Skipping dashboard opening in test environment");else{d.start("launching-dashboard",{uid:t,runId:k,sessionCount:P.length});try{let w=await nt(P,R,M,this.args["api-url"]);if(w?.length){let C=P.filter(I=>w.includes(I.test_id));s(`[EvaluatorOptimizer] Manual filter applied: ${C.length}/${P.length} sessions selected`),P.splice(0,P.length,...C)}d.end("launching-dashboard",{uid:t,runId:k,sessionCount:P.length})}catch(w){d.end("launching-dashboard",{uid:t,runId:k,sessionCount:P.length,error:w.message}),s("[EvaluatorOptimizer] Failed to open realtime browser"),s(v(w))}}let De=this.args.parallel??et();s(`[EvaluatorOptimizer] Executing ${De} parallel instances ${this.args.parallel?"(user-specified)":"(auto-calculated)"}`);let Ne=is(De),ee=P.map((w,C)=>{let I=new AbortController,B=new Q(this.args["api-url"],I.signal);s(`[EvaluatorOptimizer] Created executor for session ${w.session_uid} (testId: ${w.test_id})`);let _={},Oe=u(()=>{_.executorStartTime=Date.now(),_.testTimeoutMs=this.args["test-timeout"]*1e3,_.timeoutId=setTimeout(()=>{let O=Date.now()-_.executorStartTime;s(`[EvaluatorOptimizer ${w.session_uid}] Test timeout after ${O}ms (limit: ${_.testTimeoutMs}ms)`),Ue.abort()},_.testTimeoutMs)},"setExecutorTimeout"),W=u(()=>{typeof _.timeoutId<"u"&&(clearTimeout(_.timeoutId),delete _.timeoutId)},"clearExecutorTimeout"),bt=u(()=>{s(`[EvaluatorOptimizer ${w.session_uid}] Resetting test timeout`),W(),Oe()},"resetExecutorTimeout"),Ue={session:w,execute:u(()=>Ne(async()=>{s(`[EvaluatorOptimizer] Starting task ${C+1}/${P.length}: ${w.session_uid} (testId: ${w.test_id})`),Oe(),at(w.session_uid);try{let O=await this.#e(w,x,B,I,bt,r,k,c);return W(),O}catch(O){if(W(),await Re(w.session_uid,{decision:"CRITIQUE",feedbacks:[{structured:{error:O.message}}]}),O instanceof y)return{result:O.toEvaluationResult()};let Le=Date.now()-_.executorStartTime;if(I.signal.aborted&&Le>=_.testTimeoutMs)return{result:new y({confidence:1,feedbacks:[{text:`Test execution timed out after ${this.args["test-timeout"]} seconds. This is considered a stale test.`,structured:{violation:"STALE_TEST",severity:"HIGH",testId:w.test_id},suggestions:[{type:"action",content:"Review test complexity or increase timeout limit with --test-timeout parameter",severity:"HIGH"}]}],metadata:{staleTest:!0,executionTimeMs:Le,timeoutLimitMs:_.testTimeoutMs}}).toEvaluationResult()};throw O}finally{W(),V.incrementCompletedTests()}}),"execute"),abort:u(()=>{W(),s(`[EvaluatorOptimizer ${w.session_uid}] Aborting session`),B.abort(w.session_uid).catch(O=>{s(`[EvaluatorOptimizer ${w.session_uid}] Failed to call abort API: ${O.message}`)}).finally(()=>{I.abort(),Ie(w.session_uid)})},"abort")};return Ue});V.setTotalTests(ee.length),V.testsExecutionStarted(),d.start("tests-execution",{uid:t,runId:k,sessionCount:P.length});let te,ke=ee.map(w=>{let C=w.session.session_uid,I=w.session.test_id;return w.execute().then(B=>(s(`[EvaluatorOptimizer ${C}] Test ${I} completed with decision: ${B.result.decision}, error: ${B.error??"None"}`),B)).catch(B=>{throw s(`[EvaluatorOptimizer ${C}] Test ${I} failed with error: ${v(B)}`),B})});$?te=await ze(ke,async(w,{result:C,error:I})=>!I&&C.decision==="PASS",async w=>{Ne.clearQueue(),w.forEach(C=>{ee[C].abort()})}):te=(await Promise.allSettled(ke)).map((w,C)=>{switch(w.status){case"fulfilled":return w.value;case"rejected":{let I=y.fromError(w.reason,ee[C].session.test_id);return{result:I.toEvaluationResult(),error:I}}}}),d.end("tests-execution",{uid:t,runId:k,resultCount:te.length}),d.start("result-aggregation",{uid:t,runId:k});let we=Ze(te);return d.end("result-aggregation",{uid:t,runId:k,decision:we.decision}),d.end("executeQAWorkflow",{uid:t,result:we.decision}),we}catch(S){d.end("executeQAWorkflow",{uid:t,error:S.message}),s("[EvaluatorOptimizer] Error in QA workflow execution:"),s(v(S));let M=S?.message||"Unknown error";throw K(S,new y({confidence:.1,feedbacks:[{text:`QA automation failed: ${M}`,structured:{violation:`QA_WORKFLOW_FAILURE: ${M}`,testId:"N/A",severity:"BLOCKING"},suggestions:[{type:"action",content:"Check the project setup and ensure all dependencies are available.",severity:"HIGH"}]}]})),S}finally{await D?.stopWebapp()}}async#e(e,t,r,o,n,a,m,l){let c=e.session_uid,p=e.test_id;d.start("qa-session",{uid:c,testId:p});let g=new ae(e,t,!this.args["no-headless"],this.args.viewport);try{await g.launchBrowser(),await new Promise(E=>setTimeout(E,2e3));let f=await g.getViewportBounds(),h=await g.takeScreenshot(f);await Ce(xe(e,0,h));let b=await this.#t(e,g,r,o,n,a,m,l);return d.end("qa-session",{uid:c,testId:p,decision:b.decision}),{result:b}}catch(f){if(o.signal.aborted)return d.end("qa-session",{uid:c,testId:p,result:"aborted"}),s(`[EvaluatorOptimizer ${c}] execution aborted`),await Ie(c),{result:new y({confidence:0,feedbacks:[{text:"QA session aborted",structured:{violation:"QA_AUTOMATION_ABORTED",testId:p}}],metadata:{aborted:!0}}).toEvaluationResult()};d.end("qa-session",{uid:c,testId:p,result:"error"}),s(`[EvaluatorOptimizer ${c}] execution error (testId: ${p})`),s(v(f));let h=f?.message||"Unknown error";throw K(f,new y({confidence:.1,feedbacks:[{text:`QA automation failed: ${h}`,structured:{violation:`QA_SESSION_FAILURE: ${h}`,testId:p,severity:"BLOCKING"},suggestions:[{type:"action",content:"Check the project setup and ensure all dependencies are available.",severity:"HIGH"}]}]})),f}finally{await g.cleanup()}}async#t(e,t,r,o,n,a,m,l){let c=e.session_uid,p=e.test_id;d.start("qa-loop",{uid:c,testId:p});let g=!0,f,h,b,E;for(;g;){if(o.signal.aborted)throw s(`[executeQALoop ${c}] Loop aborted by abort controller`),new Error("QA loop aborted");let $=f?.curr_step??0;try{d.start("qa-step",{uid:c,testId:p,step:`${$}`});let R=await t.extractDOM(),x=await t.getViewportBounds(),D=await t.getDevicePixelRatio();await t.freezePage();let S,M;try{let T=await t.takeScreenshot();try{Ve(a,m,c,$,T)}catch{}M=await t.takeScreenshot(x);let j={x0:x.x0*D,y0:x.y0*D,x1:x.x1*D,y1:x.y1*D},P={dom:R,screenshot:T,viewportBounds:j,...h&&{error:h},...b&&{last_action_uid:b},...E&&{deep_explore_results:E}};E?(s("\u{1F4E4} SENDING deep_explore_results to server:"),s(`   \u{1F4CA} Total elements with hover changes: ${E.hover_analysis.totalElements}`),s(`   \u{1F3AF} Elements: ${JSON.stringify(E.hover_analysis.hoverableElements,null,2)}`),s(`   \u23F1\uFE0F Analysis time: ${E.hover_analysis.analysisTime}ms`),s(`   \u{1F4CD} Triggered by step: ${E.triggeredByStep}`),s(`   \u{1F552} Timestamp: ${E.explorationTimestamp}`),s(`\u{1F50D} FULL deep_explore_results payload: ${JSON.stringify(E,null,2)}`)):s("\u{1F4E4} No deep_explore_results in this step"),S=await r.step(e.session_uid,P)}finally{await t.unfreezePage()}if(b?s(`[executeQALoop ${c}] Sending last_action_uid: ${b}`):s(`[executeQALoop ${c}] No last_action_uid to send (first request or no previous action_uid)`),h=void 0,E=void 0,b=S.action_uid,S.deep_explore_page){s("\u{1F50D} Server requested deep page exploration - running hover analysis");try{let T=ct(R);if(T.length>0){s(`\u{1F3AF} Running hover analysis on ${T.length} QA elements for deep exploration`);let j=await t.getPage();E={hover_analysis:await ut(j,T),triggeredByStep:$,explorationTimestamp:new Date().toISOString()},s("\u2705 Deep exploration complete - results will be sent in next step"),s(`\u{1F50D} STORED deep_explore_results: ${JSON.stringify(E,null,2)}`)}else s("\u26A0\uFE0F No QA elements found for deep exploration")}catch(T){s(`\u274C Deep exploration failed: ${T}`)}}else s("\u2139\uFE0F No deep exploration requested by server");if(S.action_uid?s(`[executeQALoop ${c}] Received action_uid: ${S.action_uid}`):s(`[executeQALoop ${c}] No action_uid received`),s(`[executeQALoop ${c}] Received step response  ${JSON.stringify({action:S.action,currStep:$,action_uid:S.action_uid})}`),S.action==="FINISH"&&s(`[executeQALoop ${c}] FINISH response - Full stepResponse: ${JSON.stringify(S,null,2)}`),S.session_status&&S.action!=="FINISH"&&(f=S.session_status,await Ce(xe(e,$,M))),g=await this.#r(S,t,n,l),d.end("qa-step",{uid:c,testId:p,step:`${$}`,action:S.action,shouldContinue:g}),!g){let T=JSON.parse(S.result);return d.end("qa-loop",{uid:c,testId:p,step:`${$}`,decision:T.decision}),s(`[executeQALoop ${c}] FINISH action - Parsed result: ${JSON.stringify(T,null,2)}`),await Re(c,{decision:T.decision,confidence:T.confidence,feedbacks:T.feedbacks,metadata:T.metadata}),T}}catch(R){let x=R.message;if(this.#s(x)){h=x,s(`[executeQALoop ${c}] Selector error at step ${$}, will propagate to next step: ${x}`),d.end("qa-step",{uid:c,testId:p,step:`${$}`,result:"selector-error-propagated"});continue}else d.end("qa-step",{uid:c,testId:p,step:`${$}`,result:"error"}),d.end("qa-loop",{uid:c,testId:p,step:`${$}`,result:"error"}),s(`[EvaluatorOptimizer ${c}] Error in QA loop, Task ${p}, Step ${$}`),s(v(R)),K(R,new y({confidence:.1,feedbacks:[{text:`QA automation failed at task ${p}, step ${$}:
${x}`,structured:{violation:`QA_STEP_FAILURE: ${x}`,testId:`${p}`,step:`${$}`}}],metadata:{failedStep:$}}))}}throw new Error("QA automation loop ended without FINISH action")}#s(e){return e.includes("Failed to focus on element with selector")||e.includes("Failed to click on element with selector")||e.includes("Cannot find element with selector")||e.includes("data-qa-id")}async#r(e,t,r,o){switch(e.action){case"RESET":return e.is_replay&&(s("[processQAAction] RESET with is_replay=true: Resetting test timeout"),r()),await t.resetPageState(),e.focus&&(s("[processQAAction] RESET: Focusing on element before actions"),await t.focusElement(e.focus)),e.native_click&&(s("[processQAAction] RESET: Clicking on element before actions"),await t.clickElement(e.native_click)),e.keystroke!==void 0&&(s("[processQAAction] RESET: Pressing key before script injection"),await t.pressKey(e.keystroke)),e.script&&await t.executeScript(e.script),!0;case"INJECT":return e.focus&&(s("[processQAAction] INJECT: Focusing on element before actions"),await t.focusElement(e.focus)),e.native_click&&(s("[processQAAction] INJECT: Clicking on element before actions"),await t.clickElement(e.native_click)),e.keystroke!==void 0&&(s("[processQAAction] INJECT: Pressing key before script injection"),await t.pressKey(e.keystroke)),e.script&&await t.executeScript(e.script),await new Promise(n=>setTimeout(n,o?1e3/o+50:500)),!0;case"FINISH":return s("[processQAAction] FINISH: QA automation completed"),!1;default:throw new Error(`Unknown QA action: ${e.action}`)}}async getTool(){return this.tool.get(this.args["api-url"])}};async function mt(i,e){try{let t=pt(i);s(`Reading input file: ${t}`);let r=os(t,"utf-8"),o=JSON.parse(r);s("Input file parsed successfully");let n=new fe(e);s("Starting evaluation...");let a=await n.evaluate(o);if(e.output){let m=pt(e.output),l=JSON.stringify(a,null,2);ns(m,l,"utf-8"),s(`Evaluation results saved to: ${m}`),console.log(`Results saved to: ${m}`)}else console.log(`
=== EVALUATION RESULT ===`),console.log(JSON.stringify(a,null,2));if(!e["keep-alive"]&&!J){let m=a.decision==="PASS"?0:1;await N.cleanup(),process.exit(m)}else s("Keeping process alive due to keepAlive option or test environment");return a}catch(t){if(console.error("Error:",t.message),t.code==="ENOENT"?console.error(`File not found: ${i}`):t instanceof SyntaxError&&console.error("Invalid JSON format in input file"),await N.cleanup(),J)throw t;process.exit(1)}}u(mt,"handleEvaluate");function gt(i){try{let e=Fe("evaluator-optimizer",i);console.log(`
=== CURSOR 1-CLICK INSTALL LINK ===`),console.log(e),console.log(`
=== USAGE ===`),console.log("1. Copy the link above"),console.log("2. Paste it into your browser or click it"),console.log("3. Cursor will prompt you to install the MCP server"),console.log("4. Once installed, the server will be available in Cursor"),console.log(i?`
Configured with API endpoint: ${i}`:`
No API endpoint configured - using local evaluation`)}catch(e){console.error("Error generating install link:",e.message),process.exit(1)}}u(gt,"handleInstallLink");import{randomUUID as as}from"node:crypto";function ls(i,e){let t=u((o,n,a)=>{let m=`<svg width="400" height="300" xmlns="http://www.w3.org/2000/svg">
            <rect width="400" height="300" fill="${o}"/>
            <rect x="10" y="10" width="380" height="40" fill="#fff" stroke="#ddd" rx="4"/>
            <text x="20" y="35" font-family="Arial" font-size="14" fill="#333">Mock Web Application</text>
            <rect x="10" y="60" width="380" height="200" fill="#f9f9f9" stroke="#ddd" rx="4"/>
            <text x="20" y="85" font-family="Arial" font-size="12" fill="#666">Test Status: ${n}</text>
            ${a.map((l,c)=>`<text x="20" y="${110+c*20}" font-family="Arial" font-size="11" fill="#333">${l}</text>`).join("")}
        </svg>`;return`data:image/svg+xml;base64,${Buffer.from(m).toString("base64")}`},"createMockupSVG"),r={running:[t("#e3f2fd","RUNNING - Login Form",["\u{1F504} Currently filling login form...","\u2713 Username field populated","\u23F3 Entering password...","\u26AA Submit button ready"]),t("#fff3e0","RUNNING - Navigation",["\u{1F504} Navigating to dashboard...","\u2713 Authentication successful","\u23F3 Loading user profile...","\u26AA Waiting for page elements"]),t("#f3e5f5","RUNNING - Form Interaction",["\u{1F504} Filling user preferences...","\u2713 Form validation passed","\u23F3 Updating settings...","\u26AA Confirmation pending"])],completed:[t("#e8f5e8","COMPLETED - Success",["\u2705 All test steps completed","\u2705 Login successful","\u2705 Navigation verified","\u2705 User data validated","\u2705 Logout confirmed"]),t("#e8f5e8","COMPLETED - Dashboard",["\u2705 Dashboard loaded successfully","\u2705 All widgets displayed","\u2705 User preferences applied","\u2705 Data refresh working","\u2705 Exit flow verified"]),t("#e8f5e8","COMPLETED - Feature Test",["\u2705 Feature functionality verified","\u2705 Edge cases handled","\u2705 Performance acceptable","\u2705 UI responsive","\u2705 Accessibility confirmed"])],failed:[t("#ffebee","FAILED - Timeout",["\u274C Test failed at step 3","\u2705 Login successful","\u2705 Navigation working","\u274C Element not found: .submit-btn","\u26AA Timeout after 10 seconds"]),t("#ffebee","FAILED - Assertion",["\u274C Test failed: Data mismatch","\u2705 Form submission successful","\u2705 Server response received","\u274C Expected 'John' but got 'Jane'","\u26AA Validation error detected"]),t("#ffebee","FAILED - Network",["\u274C Test failed: Network error","\u2705 Initial page loaded","\u2705 User interaction captured","\u274C API call failed (500 error)","\u26AA Retry limit exceeded"])]};return r[i][e%r[i].length]}u(ls,"generateFakeScreenshot");function cs(i,e){let t=as(),r=`TEST_${e.toUpperCase()}_${i+1}`,o=u(l=>[{action:"Navigate to login page",expectedResult:"Login page loads successfully",stepNumber:1},{action:"Enter username 'testuser'",expectedResult:"Username field populated",stepNumber:2},{action:"Enter password",expectedResult:"Password field populated",stepNumber:3},{action:"Click login button",expectedResult:"User successfully logged in",stepNumber:4},{action:"Navigate to dashboard",expectedResult:"Dashboard page loads",stepNumber:5},{action:"Verify user information",expectedResult:"User details displayed correctly",stepNumber:6},{action:"Click profile menu",expectedResult:"Profile dropdown opens",stepNumber:7},{action:"Select settings option",expectedResult:"Settings page opens",stepNumber:8},{action:"Update user preferences",expectedResult:"Preferences saved successfully",stepNumber:9},{action:"Logout from application",expectedResult:"User successfully logged out",stepNumber:10}].slice(0,l),"generateSteps"),a={pending:{name:`Pending Login Flow ${i+1}`,description:"Test user authentication and basic navigation flow - queued for execution",steps:o(5+i%3),currentStep:0},running:{name:`Running E2E Test ${i+1}`,description:"Currently executing end-to-end user workflow validation",steps:o(6+i%4),currentStep:2+i%3},completed:{name:`Completed Feature Test ${i+1}`,description:"Successfully validated feature functionality and user interactions",steps:o(4+i%3),currentStep:0},failed:{name:`Failed Integration Test ${i+1}`,description:`Integration test failed due to ${["timeout","element not found","assertion error","network issue"][i%4]}`,steps:o(7+i%2),currentStep:0},aborted:{name:`Aborted Stress Test ${i+1}`,description:`Performance test aborted due to ${["resource constraints","manual intervention","system overload"][i%3]}`,steps:o(3+i%4),currentStep:0}}[e],m={sessionUid:t,position:i+1,status:e,taskName:a.name,taskDescription:a.description,testId:r,currentStep:a.currentStep,totalSteps:a.steps.length,stepDescriptions:a.steps.map(l=>l.action),lastUpdate:Date.now()};return(e==="completed"||e==="failed")&&(m.result=us(e,i)),m}u(cs,"generateFakeDashboardSession");function us(i,e){let t={decision:i==="completed"?"PASS":"CRITIQUE",confidence:i==="completed"?.85+e%3*.05:.65+e%4*.08,feedbacks:[]};return i==="completed"?(t.feedbacks.push({text:`Test completed successfully. All ${3+e%3} validation steps passed.`,structured:void 0,suggestions:[]}),t.systemNotifications=[{type:"success",message:"All test assertions passed",priority:"medium",actionRequired:!1}]):(t.feedbacks.push({text:`Test failed during step ${2+e%3}. Critical validation error detected.`,structured:{violation:["Authentication failure","Element interaction timeout","Data validation error","Network connectivity issue"][e%4],testId:`TEST_FAILED_${e+1}`,step:`Step ${2+e%3}`,penalty:`$${(e+1)*10}`,severity:["CRITICAL","HIGH","MEDIUM"][e%3]},suggestions:[{type:"action",content:"Retry test with increased timeout values",description:"System may be under heavy load",severity:"MEDIUM"},{type:"code",content:"await page.waitForSelector('.target-element', { timeout: 10000 });",description:"Add explicit wait conditions",severity:"HIGH"}]}),t.systemNotifications=[{type:"error",message:"Critical test failure requires attention",priority:"high",actionRequired:!0}]),t.metadata={executionTime:`${15+e*3}.${e*7%10}s`,browserVersion:"Chrome 120.0.6099.71",testRunId:`run_${Date.now()}_${e}`,timestamp:new Date().toISOString()},t}u(us,"generateFakeEvaluationResult");async function ds(i){try{s(`\u{1F680} Opening test dashboard with ${i.length} sessions`);let e=await import("path"),t=await import("fs"),o=u(p=>{let g=p;for(;g!==e.dirname(g);){let f=e.join(g,"package.json");if(t.existsSync(f))return g;g=e.dirname(g)}return process.cwd()},"findProjectRoot")(process.cwd()),n=e.join(o,"src/dashboard/index.html");if(!t.existsSync(n))throw new Error(`Dashboard HTML file not found at: ${n}`);let a=await import("puppeteer"),m=`file://${n}`,l=await a.default.launch({headless:!1,defaultViewport:null,protocolTimeout:0,args:["--no-sandbox","--disable-setuid-sandbox","--start-maximized","--disable-web-security","--disable-features=VizDisplayCompositor","--disable-background-timer-throttling","--disable-renderer-backgrounding","--disable-backgrounding-occluded-windows","--disable-infobars","--disable-session-crashed-bubble","--disable-translate","--no-first-run","--disable-default-apps"]}),c=await l.newPage();await c.goto(m),await c.waitForSelector("body",{timeout:5e3}).catch(()=>new Promise(p=>setTimeout(p,1e3))),await c.evaluate(p=>{window.dispatchEvent(new CustomEvent("dashboardInit",{detail:{sessions:p}}))},i),s(`\u2705 Test dashboard initialized with ${i.length} sessions`),s(`\u{1F4CA} Dashboard URL: ${m}`),l.on("disconnected",()=>{s("\u{1F534} Test dashboard browser disconnected")}),setTimeout(()=>{ps(c,i)},1e3)}catch(e){throw s(`\u274C Failed to open test dashboard: ${e}`),e}}u(ds,"openTestDashboard");async function ft(){try{s("\u{1F9EA} Generating fake dashboard data for testing...");let i=["pending","running","completed","failed","aborted"],e=[],t=0;for(let r of i)for(let o=0;o<10;o++){let n=cs(t,r);if(e.push(n),t++,r==="aborted")break}s(`\u{1F4CA} Generated ${e.length} fake dashboard sessions (10 per status: ${i.join(", ")})`),s("\u{1F680} Launching test dashboard with fake data..."),await ds(e),setTimeout(()=>{ms()},3e3)}catch(i){throw s(`\u274C Failed to launch test dashboard: ${i}`),i}}u(ft,"handleTestDashboard");async function ps(i,e){try{s("\u{1F4F8} Sending screenshot updates via dashboardUpdate events...");for(let t of e)if(t.status==="running"||t.status==="completed"||t.status==="failed"){let r=ls(t.status,t.position);await i.evaluate((o,n)=>{window.dispatchEvent(new CustomEvent("dashboardUpdate",{detail:{sessionUid:o,data:{},screenshot:n}}))},t.sessionUid,r),await new Promise(o=>setTimeout(o,50))}s(`\u2705 Screenshot updates sent for ${e.filter(t=>t.status==="running"||t.status==="completed"||t.status==="failed").length} sessions`)}catch(t){s(`\u274C Failed to send screenshot updates: ${t}`)}}u(ps,"simulateScreenshotUpdates");async function ms(){s("\u{1F504} Real-time updates simulation would start here (not implemented in this demo)"),s("\u{1F4A1} In a real scenario, running sessions would update their progress automatically"),s("\u{1F4C8} You can observe the different card states and data structures in the dashboard")}u(ms,"simulateRealTimeUpdates");import gs from"arg";var ht=u(i=>{let e={"--start":{description:"Start with test number n (skip tests 1 to n-1). Must be \u2265 1.",context:["cli"],argDisplay:"--start n"},"--only":{description:"Run only test number n (if integer) or testId (if string). Cannot be used with --start or --ignore.",context:["cli"],argDisplay:"--only n|testId"},"--ignore":{description:"Ignore test with index n (if number) or testId (if string). Can be used multiple times.",context:["cli"],continuation:"Cannot be used with --only.",argDisplay:"--ignore n|id"},"--parallel":{description:"Set maximum parallel instances (default: auto-calculated). Must be \u2265 1.",context:["cli","server"],argDisplay:"--parallel n"},"--keep-alive":{description:"Keep process alive after evaluation (don't exit). Default: false.",context:["cli"],argDisplay:"--keep-alive"},"--fail-fast":{description:"Enable/disable fail-fast mode. Accepts: 'true', 'false', '1', '0'. Default: true.",context:["cli","server"],continuation:"When false, continues all tasks even if one fails.",argDisplay:"--fail-fast arg"},"--manual-filter":{description:"Show test selection UI in dashboard before running tests. Default: false.",context:["cli","server"],argDisplay:"--manual-filter"},"--test-timeout":{description:"Set test execution timeout in seconds. Default: 300 seconds (5 minutes).",context:["cli","server"],argDisplay:"--test-timeout n"},"--api-url":{description:'Override the API base URL. Default: "http://0.0.0.0:8000"',context:["cli","server"],argDisplay:"--api-url url"},"--output":{description:"Save evaluation results to JSON file instead of console output",context:["cli"],argDisplay:"--output filename.json"},"--help":{description:"Show this help message",context:["cli","server"],argDisplay:"--help"},"--no-headless":{description:"Show browser windows during QA automation (for debugging). Default: false.",context:["cli"],argDisplay:"--no-headless"},"--thinking-budget":{description:"Set thinking budget for evaluation processing. Accepts any integer (including 0 and -1).",context:["cli","server"],argDisplay:"--thinking-budget n"},"--viewport":{description:"Set browser viewport size in WIDTHxHEIGHT format (e.g., 1920x1080). Default: system natural viewport.",context:["cli"],argDisplay:"--viewport WIDTHxHEIGHT"},"--analyze-hover-impact":{description:"Perform visual analysis of hover effects (takes screenshots, slower but more detailed).",context:["cli"],argDisplay:"--analyze-hover-impact"}},t=["\u2022 --start and --only cannot be used together","\u2022 --ignore cannot be used with --only","\u2022 All numeric parameters must be positive integers (\u2265 1)"];return{arguments:Object.entries(e).filter(([o,n])=>n.context.includes(i)).map(([o,n])=>({arg:o,argDisplay:n.argDisplay,description:n.description,continuation:n.continuation})),parameterRestrictions:i==="cli"?t:[]}},"getArgumentDescriptions"),wt=u(i=>{let e=gs({"--start":Number,"--only":String,"--parallel":Number,"--test-timeout":Number,"--thinking-budget":Number,"--api-url":String,"--output":String,"--fail-fast":String,"--viewport":String,"--keep-alive":Boolean,"--help":Boolean,"--manual-filter":Boolean,"--no-headless":Boolean,"--analyze-hover-impact":Boolean,"--ignore":[String]},{argv:i,permissive:!1}),t={_:e._,"api-url":"http://0.0.0.0:8000","fail-fast":!0,"keep-alive":!1,"manual-filter":!1,"no-headless":!1,"analyze-hover-impact":!1,"test-timeout":300};if(typeof e["--start"]<"u"){let r=e["--start"];if(isNaN(r)||r<1)throw new Error("--start parameter must be a positive number (1 or greater)");t.start=r,s(`Will start with test ${t.start} (skip tests 1-${t.start-1}) `)}if(typeof e["--only"]<"u"){let r=e["--only"];s("[parseCommandLineArgs] ========== Parsing --only parameter =========="),s(`[parseCommandLineArgs] Raw --only value: "${r}"`),s(`[parseCommandLineArgs] Type of --only value: ${typeof r}`);let o=parseInt(r,10);if(s(`[parseCommandLineArgs] Parsed numeric value: ${o}`),s(`[parseCommandLineArgs] Is numeric: ${!isNaN(o)}`),s(`[parseCommandLineArgs] Is positive: ${o>0}`),s(`[parseCommandLineArgs] String representation matches: ${o.toString()===r}`),!isNaN(o)&&o>0&&o.toString()===r)t.only=o,t.onlyIndex=o,s(`[parseCommandLineArgs] \u2705 Parsed --only as numeric index: ${t.only}`),s(`[parseCommandLineArgs] result.onlyIndex = ${t.onlyIndex}`);else if(r.trim().length>0)t.only=r,t.onlyTestId=r,s(`[parseCommandLineArgs] \u2705 Parsed --only as string testId: "${t.only}"`),s(`[parseCommandLineArgs] result.onlyTestId = "${t.onlyTestId}"`);else throw new Error("--only parameter must be a positive number (1 or greater) or a non-empty testId string");s("[parseCommandLineArgs] ========== End --only parameter parsing ==========")}else s("[parseCommandLineArgs] No --only parameter provided");if(typeof e["--parallel"]<"u"){let r=e["--parallel"];if(isNaN(r)||r<1)throw new Error("--parallel parameter must be a positive number (1 or greater)");t.parallel=r,s(`--parallel: Will run up to ${t.parallel} instances`)}if(typeof e["--test-timeout"]<"u"){let r=e["--test-timeout"];if(isNaN(r)||r<1)throw new Error("--test-timeout parameter must be a positive number (1 or greater)");t["test-timeout"]=r}if(s(`--test-timeout: Will use timeout of ${t["test-timeout"]} seconds`),e["--api-url"]&&(t["api-url"]=e["--api-url"]),s(`--api-url: Will use API base URL "${t["api-url"]}"`),e["--output"]&&(t.output=e["--output"],s(`--output: Will save results to JSON file "${t.output}"`)),typeof e["--keep-alive"]<"u"&&(t["keep-alive"]=e["--keep-alive"]),s(`--keep-alive: Will set keep alive to ${t["keep-alive"]}`),typeof e["--help"]<"u"&&(t.help=e["--help"]),typeof e["--manual-filter"]<"u"&&(t["manual-filter"]=e["--manual-filter"]),s(`--manual-filter: Manual filter mode: ${t["manual-filter"]?"enabled":"disabled"}`),typeof e["--no-headless"]<"u"&&(t["no-headless"]=e["--no-headless"]),s(`--no-headless: Browser visibility mode: ${t["no-headless"]?"enabled (browsers visible)":"disabled (headless)"}`),typeof e["--analyze-hover-impact"]<"u"&&(t["analyze-hover-impact"]=e["--analyze-hover-impact"]),s(`--analyze-hover-impact: Visual hover analysis: ${t["analyze-hover-impact"]?"enabled":"disabled"}`),typeof e["--thinking-budget"]<"u"){let r=e["--thinking-budget"];if(isNaN(r))throw new Error("--thinking-budget parameter must be a valid number");t["thinking-budget"]=r,s(`--thinking-budget: Will use thinking budget of ${t["thinking-budget"]}`)}if(typeof e["--viewport"]<"u"){let r=e["--viewport"];s("[parseCommandLineArgs] ========== Parsing --viewport parameter =========="),s(`[parseCommandLineArgs] Raw --viewport value: "${r}"`);let o=r.match(/^(\d+)x(\d+)$/);if(!o)throw new Error("--viewport parameter must be in format WIDTHxHEIGHT (e.g., 1920x1080)");let n=parseInt(o[1],10),a=parseInt(o[2],10);if(n<100||n>4e3)throw new Error("--viewport width must be between 100 and 4000 pixels");if(a<100||a>4e3)throw new Error("--viewport height must be between 100 and 4000 pixels");t.viewport={width:n,height:a},s(`Will use viewport size: ${n}x${a}`)}if(e["--ignore"]){let r=e["--ignore"],o=[],n=[];for(let a of r){let m=parseInt(a,10);!isNaN(m)&&m>0?o.push(m):n.push(a)}t.ignoreIndices=o,s(`Will ignore test indices: ${t.ignoreIndices.join(", ")}`),t.ignoreStrings=n,s(`Will ignore test IDs: ${t.ignoreStrings.join(", ")}`)}if(typeof e["--fail-fast"]<"u"){let r=e["--fail-fast"];if(r==="false"||r==="0")t["fail-fast"]=!1;else if(r==="true"||r==="1")t["fail-fast"]=!0;else throw new Error("Invalid value for --fail-fast: must be 'true', 'false', '1', or '0'")}if(s(`Fail-fast mode: ${t["fail-fast"]?"enabled":"disabled"}`),t.start!==void 0&&t.only!==void 0)throw new Error("--start and --only parameters cannot be used together");if(t.only!==void 0&&(t.ignoreIndices?.length||t.ignoreStrings?.length))throw new Error("--ignore parameters cannot be used with --only");return t},"parseCommandLineArgs");function he(){let{arguments:i,parameterRestrictions:e}=ht("cli");console.log(`
Usage: cli <command> [options]

Commands:
  evaluate <input-file.json> [options]    Evaluate using JSON input file
  install-link [--api-url url]            Generate Cursor 1-click install link
  test-dashboard                          Launch dashboard with fake test data
  hover-analysis <url> [options]          Analyze hoverable elements on a web page
  help                                    Show this help message

Options:`),i.forEach(({argDisplay:t,description:r,continuation:o})=>{console.log(`  ${t.padEnd(18)} ${r}`),o&&console.log(`                     ${o}`)}),console.log(`
Parameter Restrictions:`),e.forEach(t=>{console.log(`  ${t}`)}),console.log(`

Note: This is the CLI tool. For MCP server configuration, see:
  npx mcp-evaluator-optimizer --help
`)}u(he,"showHelp");async function fs(){let i=process.argv.slice(2);i.length===0&&(he(),process.exit(1));let e=wt(i),t=e._;switch(t[0]){case"evaluate":{let o=t[1];o||(console.error("Error: evaluate command requires an input file"),he(),process.exit(1)),await mt(o,e)}break;case"install-link":gt(e["api-url"]);break;case"test-dashboard":await ft();break;case"hover-analysis":{let o=t[1];o||(console.error("Error: hover-analysis command requires a URL"),he(),process.exit(1)),await dt(o,e)}break;case"help":case"--help":case"-h":default:he();break}}u(fs,"main");fs().catch(async i=>{console.error("Unexpected error:",i),await N.cleanup(),process.exit(1)});
